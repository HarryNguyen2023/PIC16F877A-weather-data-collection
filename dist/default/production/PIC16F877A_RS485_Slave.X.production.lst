

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Aug 20 10:32:04 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	dabs	1,0x7E,2
    52     0000                     
    53                           ; Version 2.40
    54                           ; Generated 17/11/2021 GMT
    55                           ; 
    56                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution. Publication is not required when
    70                           ;        this file is used in an embedded application.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F877A Definitions
    86                           ; 
    87                           ; SFR Addresses
    88     0000                     	;# 
    89     0001                     	;# 
    90     0002                     	;# 
    91     0003                     	;# 
    92     0004                     	;# 
    93     0005                     	;# 
    94     0006                     	;# 
    95     0007                     	;# 
    96     0008                     	;# 
    97     0009                     	;# 
    98     000A                     	;# 
    99     000B                     	;# 
   100     000C                     	;# 
   101     000D                     	;# 
   102     000E                     	;# 
   103     000E                     	;# 
   104     000F                     	;# 
   105     0010                     	;# 
   106     0011                     	;# 
   107     0012                     	;# 
   108     0013                     	;# 
   109     0014                     	;# 
   110     0015                     	;# 
   111     0015                     	;# 
   112     0016                     	;# 
   113     0017                     	;# 
   114     0018                     	;# 
   115     0019                     	;# 
   116     001A                     	;# 
   117     001B                     	;# 
   118     001B                     	;# 
   119     001C                     	;# 
   120     001D                     	;# 
   121     001E                     	;# 
   122     001F                     	;# 
   123     0081                     	;# 
   124     0085                     	;# 
   125     0086                     	;# 
   126     0087                     	;# 
   127     0088                     	;# 
   128     0089                     	;# 
   129     008C                     	;# 
   130     008D                     	;# 
   131     008E                     	;# 
   132     0091                     	;# 
   133     0092                     	;# 
   134     0093                     	;# 
   135     0094                     	;# 
   136     0098                     	;# 
   137     0099                     	;# 
   138     009C                     	;# 
   139     009D                     	;# 
   140     009E                     	;# 
   141     009F                     	;# 
   142     010C                     	;# 
   143     010D                     	;# 
   144     010E                     	;# 
   145     010F                     	;# 
   146     018C                     	;# 
   147     018D                     	;# 
   148     0000                     	;# 
   149     0001                     	;# 
   150     0002                     	;# 
   151     0003                     	;# 
   152     0004                     	;# 
   153     0005                     	;# 
   154     0006                     	;# 
   155     0007                     	;# 
   156     0008                     	;# 
   157     0009                     	;# 
   158     000A                     	;# 
   159     000B                     	;# 
   160     000C                     	;# 
   161     000D                     	;# 
   162     000E                     	;# 
   163     000E                     	;# 
   164     000F                     	;# 
   165     0010                     	;# 
   166     0011                     	;# 
   167     0012                     	;# 
   168     0013                     	;# 
   169     0014                     	;# 
   170     0015                     	;# 
   171     0015                     	;# 
   172     0016                     	;# 
   173     0017                     	;# 
   174     0018                     	;# 
   175     0019                     	;# 
   176     001A                     	;# 
   177     001B                     	;# 
   178     001B                     	;# 
   179     001C                     	;# 
   180     001D                     	;# 
   181     001E                     	;# 
   182     001F                     	;# 
   183     0081                     	;# 
   184     0085                     	;# 
   185     0086                     	;# 
   186     0087                     	;# 
   187     0088                     	;# 
   188     0089                     	;# 
   189     008C                     	;# 
   190     008D                     	;# 
   191     008E                     	;# 
   192     0091                     	;# 
   193     0092                     	;# 
   194     0093                     	;# 
   195     0094                     	;# 
   196     0098                     	;# 
   197     0099                     	;# 
   198     009C                     	;# 
   199     009D                     	;# 
   200     009E                     	;# 
   201     009F                     	;# 
   202     010C                     	;# 
   203     010D                     	;# 
   204     010E                     	;# 
   205     010F                     	;# 
   206     018C                     	;# 
   207     018D                     	;# 
   208     0000                     	;# 
   209     0001                     	;# 
   210     0002                     	;# 
   211     0003                     	;# 
   212     0004                     	;# 
   213     0005                     	;# 
   214     0006                     	;# 
   215     0007                     	;# 
   216     0008                     	;# 
   217     0009                     	;# 
   218     000A                     	;# 
   219     000B                     	;# 
   220     000C                     	;# 
   221     000D                     	;# 
   222     000E                     	;# 
   223     000E                     	;# 
   224     000F                     	;# 
   225     0010                     	;# 
   226     0011                     	;# 
   227     0012                     	;# 
   228     0013                     	;# 
   229     0014                     	;# 
   230     0015                     	;# 
   231     0015                     	;# 
   232     0016                     	;# 
   233     0017                     	;# 
   234     0018                     	;# 
   235     0019                     	;# 
   236     001A                     	;# 
   237     001B                     	;# 
   238     001B                     	;# 
   239     001C                     	;# 
   240     001D                     	;# 
   241     001E                     	;# 
   242     001F                     	;# 
   243     0081                     	;# 
   244     0085                     	;# 
   245     0086                     	;# 
   246     0087                     	;# 
   247     0088                     	;# 
   248     0089                     	;# 
   249     008C                     	;# 
   250     008D                     	;# 
   251     008E                     	;# 
   252     0091                     	;# 
   253     0092                     	;# 
   254     0093                     	;# 
   255     0094                     	;# 
   256     0098                     	;# 
   257     0099                     	;# 
   258     009C                     	;# 
   259     009D                     	;# 
   260     009E                     	;# 
   261     009F                     	;# 
   262     010C                     	;# 
   263     010D                     	;# 
   264     010E                     	;# 
   265     010F                     	;# 
   266     018C                     	;# 
   267     018D                     	;# 
   268     0000                     	;# 
   269     0001                     	;# 
   270     0002                     	;# 
   271     0003                     	;# 
   272     0004                     	;# 
   273     0005                     	;# 
   274     0006                     	;# 
   275     0007                     	;# 
   276     0008                     	;# 
   277     0009                     	;# 
   278     000A                     	;# 
   279     000B                     	;# 
   280     000C                     	;# 
   281     000D                     	;# 
   282     000E                     	;# 
   283     000E                     	;# 
   284     000F                     	;# 
   285     0010                     	;# 
   286     0011                     	;# 
   287     0012                     	;# 
   288     0013                     	;# 
   289     0014                     	;# 
   290     0015                     	;# 
   291     0015                     	;# 
   292     0016                     	;# 
   293     0017                     	;# 
   294     0018                     	;# 
   295     0019                     	;# 
   296     001A                     	;# 
   297     001B                     	;# 
   298     001B                     	;# 
   299     001C                     	;# 
   300     001D                     	;# 
   301     001E                     	;# 
   302     001F                     	;# 
   303     0081                     	;# 
   304     0085                     	;# 
   305     0086                     	;# 
   306     0087                     	;# 
   307     0088                     	;# 
   308     0089                     	;# 
   309     008C                     	;# 
   310     008D                     	;# 
   311     008E                     	;# 
   312     0091                     	;# 
   313     0092                     	;# 
   314     0093                     	;# 
   315     0094                     	;# 
   316     0098                     	;# 
   317     0099                     	;# 
   318     009C                     	;# 
   319     009D                     	;# 
   320     009E                     	;# 
   321     009F                     	;# 
   322     010C                     	;# 
   323     010D                     	;# 
   324     010E                     	;# 
   325     010F                     	;# 
   326     018C                     	;# 
   327     018D                     	;# 
   328     0000                     	;# 
   329     0001                     	;# 
   330     0002                     	;# 
   331     0003                     	;# 
   332     0004                     	;# 
   333     0005                     	;# 
   334     0006                     	;# 
   335     0007                     	;# 
   336     0008                     	;# 
   337     0009                     	;# 
   338     000A                     	;# 
   339     000B                     	;# 
   340     000C                     	;# 
   341     000D                     	;# 
   342     000E                     	;# 
   343     000E                     	;# 
   344     000F                     	;# 
   345     0010                     	;# 
   346     0011                     	;# 
   347     0012                     	;# 
   348     0013                     	;# 
   349     0014                     	;# 
   350     0015                     	;# 
   351     0015                     	;# 
   352     0016                     	;# 
   353     0017                     	;# 
   354     0018                     	;# 
   355     0019                     	;# 
   356     001A                     	;# 
   357     001B                     	;# 
   358     001B                     	;# 
   359     001C                     	;# 
   360     001D                     	;# 
   361     001E                     	;# 
   362     001F                     	;# 
   363     0081                     	;# 
   364     0085                     	;# 
   365     0086                     	;# 
   366     0087                     	;# 
   367     0088                     	;# 
   368     0089                     	;# 
   369     008C                     	;# 
   370     008D                     	;# 
   371     008E                     	;# 
   372     0091                     	;# 
   373     0092                     	;# 
   374     0093                     	;# 
   375     0094                     	;# 
   376     0098                     	;# 
   377     0099                     	;# 
   378     009C                     	;# 
   379     009D                     	;# 
   380     009E                     	;# 
   381     009F                     	;# 
   382     010C                     	;# 
   383     010D                     	;# 
   384     010E                     	;# 
   385     010F                     	;# 
   386     018C                     	;# 
   387     018D                     	;# 
   388     0000                     	;# 
   389     0001                     	;# 
   390     0002                     	;# 
   391     0003                     	;# 
   392     0004                     	;# 
   393     0005                     	;# 
   394     0006                     	;# 
   395     0007                     	;# 
   396     0008                     	;# 
   397     0009                     	;# 
   398     000A                     	;# 
   399     000B                     	;# 
   400     000C                     	;# 
   401     000D                     	;# 
   402     000E                     	;# 
   403     000E                     	;# 
   404     000F                     	;# 
   405     0010                     	;# 
   406     0011                     	;# 
   407     0012                     	;# 
   408     0013                     	;# 
   409     0014                     	;# 
   410     0015                     	;# 
   411     0015                     	;# 
   412     0016                     	;# 
   413     0017                     	;# 
   414     0018                     	;# 
   415     0019                     	;# 
   416     001A                     	;# 
   417     001B                     	;# 
   418     001B                     	;# 
   419     001C                     	;# 
   420     001D                     	;# 
   421     001E                     	;# 
   422     001F                     	;# 
   423     0081                     	;# 
   424     0085                     	;# 
   425     0086                     	;# 
   426     0087                     	;# 
   427     0088                     	;# 
   428     0089                     	;# 
   429     008C                     	;# 
   430     008D                     	;# 
   431     008E                     	;# 
   432     0091                     	;# 
   433     0092                     	;# 
   434     0093                     	;# 
   435     0094                     	;# 
   436     0098                     	;# 
   437     0099                     	;# 
   438     009C                     	;# 
   439     009D                     	;# 
   440     009E                     	;# 
   441     009F                     	;# 
   442     010C                     	;# 
   443     010D                     	;# 
   444     010E                     	;# 
   445     010F                     	;# 
   446     018C                     	;# 
   447     018D                     	;# 
   448     0000                     	;# 
   449     0001                     	;# 
   450     0002                     	;# 
   451     0003                     	;# 
   452     0004                     	;# 
   453     0005                     	;# 
   454     0006                     	;# 
   455     0007                     	;# 
   456     0008                     	;# 
   457     0009                     	;# 
   458     000A                     	;# 
   459     000B                     	;# 
   460     000C                     	;# 
   461     000D                     	;# 
   462     000E                     	;# 
   463     000E                     	;# 
   464     000F                     	;# 
   465     0010                     	;# 
   466     0011                     	;# 
   467     0012                     	;# 
   468     0013                     	;# 
   469     0014                     	;# 
   470     0015                     	;# 
   471     0015                     	;# 
   472     0016                     	;# 
   473     0017                     	;# 
   474     0018                     	;# 
   475     0019                     	;# 
   476     001A                     	;# 
   477     001B                     	;# 
   478     001B                     	;# 
   479     001C                     	;# 
   480     001D                     	;# 
   481     001E                     	;# 
   482     001F                     	;# 
   483     0081                     	;# 
   484     0085                     	;# 
   485     0086                     	;# 
   486     0087                     	;# 
   487     0088                     	;# 
   488     0089                     	;# 
   489     008C                     	;# 
   490     008D                     	;# 
   491     008E                     	;# 
   492     0091                     	;# 
   493     0092                     	;# 
   494     0093                     	;# 
   495     0094                     	;# 
   496     0098                     	;# 
   497     0099                     	;# 
   498     009C                     	;# 
   499     009D                     	;# 
   500     009E                     	;# 
   501     009F                     	;# 
   502     010C                     	;# 
   503     010D                     	;# 
   504     010E                     	;# 
   505     010F                     	;# 
   506     018C                     	;# 
   507     018D                     	;# 
   508     0000                     	;# 
   509     0001                     	;# 
   510     0002                     	;# 
   511     0003                     	;# 
   512     0004                     	;# 
   513     0005                     	;# 
   514     0006                     	;# 
   515     0007                     	;# 
   516     0008                     	;# 
   517     0009                     	;# 
   518     000A                     	;# 
   519     000B                     	;# 
   520     000C                     	;# 
   521     000D                     	;# 
   522     000E                     	;# 
   523     000E                     	;# 
   524     000F                     	;# 
   525     0010                     	;# 
   526     0011                     	;# 
   527     0012                     	;# 
   528     0013                     	;# 
   529     0014                     	;# 
   530     0015                     	;# 
   531     0015                     	;# 
   532     0016                     	;# 
   533     0017                     	;# 
   534     0018                     	;# 
   535     0019                     	;# 
   536     001A                     	;# 
   537     001B                     	;# 
   538     001B                     	;# 
   539     001C                     	;# 
   540     001D                     	;# 
   541     001E                     	;# 
   542     001F                     	;# 
   543     0081                     	;# 
   544     0085                     	;# 
   545     0086                     	;# 
   546     0087                     	;# 
   547     0088                     	;# 
   548     0089                     	;# 
   549     008C                     	;# 
   550     008D                     	;# 
   551     008E                     	;# 
   552     0091                     	;# 
   553     0092                     	;# 
   554     0093                     	;# 
   555     0094                     	;# 
   556     0098                     	;# 
   557     0099                     	;# 
   558     009C                     	;# 
   559     009D                     	;# 
   560     009E                     	;# 
   561     009F                     	;# 
   562     010C                     	;# 
   563     010D                     	;# 
   564     010E                     	;# 
   565     010F                     	;# 
   566     018C                     	;# 
   567     018D                     	;# 
   568     0000                     	;# 
   569     0001                     	;# 
   570     0002                     	;# 
   571     0003                     	;# 
   572     0004                     	;# 
   573     0005                     	;# 
   574     0006                     	;# 
   575     0007                     	;# 
   576     0008                     	;# 
   577     0009                     	;# 
   578     000A                     	;# 
   579     000B                     	;# 
   580     000C                     	;# 
   581     000D                     	;# 
   582     000E                     	;# 
   583     000E                     	;# 
   584     000F                     	;# 
   585     0010                     	;# 
   586     0011                     	;# 
   587     0012                     	;# 
   588     0013                     	;# 
   589     0014                     	;# 
   590     0015                     	;# 
   591     0015                     	;# 
   592     0016                     	;# 
   593     0017                     	;# 
   594     0018                     	;# 
   595     0019                     	;# 
   596     001A                     	;# 
   597     001B                     	;# 
   598     001B                     	;# 
   599     001C                     	;# 
   600     001D                     	;# 
   601     001E                     	;# 
   602     001F                     	;# 
   603     0081                     	;# 
   604     0085                     	;# 
   605     0086                     	;# 
   606     0087                     	;# 
   607     0088                     	;# 
   608     0089                     	;# 
   609     008C                     	;# 
   610     008D                     	;# 
   611     008E                     	;# 
   612     0091                     	;# 
   613     0092                     	;# 
   614     0093                     	;# 
   615     0094                     	;# 
   616     0098                     	;# 
   617     0099                     	;# 
   618     009C                     	;# 
   619     009D                     	;# 
   620     009E                     	;# 
   621     009F                     	;# 
   622     010C                     	;# 
   623     010D                     	;# 
   624     010E                     	;# 
   625     010F                     	;# 
   626     018C                     	;# 
   627     018D                     	;# 
   628                           
   629                           	psect	idataBANK1
   630     0452                     __pidataBANK1:
   631                           
   632                           ;initializer for _SS_pin
   633     0452  3401               	retlw	1
   634     0453  3402               	retlw	2
   635     0454  3404               	retlw	4
   636     0455  3408               	retlw	8
   637     0456  3410               	retlw	16
   638     0457  3420               	retlw	32
   639     0458  3440               	retlw	64
   640     0459  3480               	retlw	128
   641     0015                     _CCPR1	set	21
   642     000E                     _TMR1	set	14
   643     0017                     _CCP1CON	set	23
   644     001A                     _RCREG	set	26
   645     0019                     _TXREG	set	25
   646     0013                     _SSPBUF	set	19
   647     0001                     _TMR0	set	1
   648     00B8                     _CCP1M0	set	184
   649     00B9                     _CCP1M1	set	185
   650     00BA                     _CCP1M2	set	186
   651     00BB                     _CCP1M3	set	187
   652     0080                     _TMR1ON	set	128
   653     0084                     _T1CKPS0	set	132
   654     0085                     _T1CKPS1	set	133
   655     0081                     _TMR1CS	set	129
   656     005D                     _TMR0IE	set	93
   657     00C1                     _OERR	set	193
   658     00C4                     _CREN	set	196
   659     00C6                     _RX9	set	198
   660     00C7                     _SPEN	set	199
   661     00A7                     _WCOL	set	167
   662     005F                     _GIE	set	95
   663     005E                     _PEIE	set	94
   664     00A4                     _CKP	set	164
   665     00A5                     _SSPEN	set	165
   666     00A0                     _SSPM0	set	160
   667     00A1                     _SSPM1	set	161
   668     00A2                     _SSPM2	set	162
   669     00A3                     _SSPM3	set	163
   670     0031                     _RB1	set	49
   671     0040                     _RD0	set	64
   672     0065                     _RCIF	set	101
   673     0062                     _CCP1IF	set	98
   674     0060                     _TMR1IF	set	96
   675     005A                     _TMR0IF	set	90
   676     0099                     _SPBRG	set	153
   677     0094                     _SSPSTATbits	set	148
   678     0088                     _TRISD	set	136
   679     0460                     _TMR1IE	set	1120
   680     043A                     _TRISC2	set	1082
   681     0462                     _CCP1IE	set	1122
   682     040D                     _T0CS	set	1037
   683     0408                     _PS0	set	1032
   684     0409                     _PS1	set	1033
   685     040A                     _PS2	set	1034
   686     040B                     _PSA	set	1035
   687     04C1                     _TRMT	set	1217
   688     0465                     _RCIE	set	1125
   689     04C2                     _BRGH	set	1218
   690     04C5                     _TXEN	set	1221
   691     04C6                     _TX9	set	1222
   692     04C4                     _SYNC	set	1220
   693     043F                     _TRISC7	set	1087
   694     043E                     _TRISC6	set	1086
   695     043B                     _TRISC3	set	1083
   696     043C                     _TRISC4	set	1084
   697     043D                     _TRISC5	set	1085
   698     04A7                     _SMP	set	1191
   699     04A6                     _CKE	set	1190
   700     0431                     _TRISB1	set	1073
   701     0440                     _TRISD0	set	1088
   702                           
   703                           	psect	cinit
   704     0015                     start_initialization:	
   705                           ; #config settings
   706                           
   707     0015                     __initialization:
   708                           
   709                           ; Initialize objects allocated to BANK1
   710     0015  1383               	bcf	3,7	;select IRP bank0
   711     0016  30B1               	movlw	low (__pdataBANK1+8)
   712     0017  00FD               	movwf	btemp+-1
   713     0018  3004               	movlw	high __pidataBANK1
   714     0019  00FE               	movwf	btemp
   715     001A  3052               	movlw	low __pidataBANK1
   716     001B  00FF               	movwf	btemp+1
   717     001C  30A9               	movlw	low __pdataBANK1
   718     001D  0084               	movwf	4
   719     001E  120A  118A  23E0  120A  118A  	fcall	init_ram0
   720                           
   721                           ; Clear objects allocated to BANK0
   722     0023  3020               	movlw	low __pbssBANK0
   723     0024  0084               	movwf	4
   724     0025  304B               	movlw	low (__pbssBANK0+43)
   725     0026  120A  118A  245A   	fcall	clear_ram0
   726                           
   727                           ; Clear objects allocated to BITBANK0
   728     0029  01E1               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   729     002A                     end_of_initialization:	
   730                           ;End of C runtime variable initialization code
   731                           
   732     002A                     __end_of__initialization:
   733     002A  0183               	clrf	3
   734     002B  120A  118A  2AF0   	ljmp	_main	;jump to C main() function
   735                           
   736                           	psect	bitbssBANK0
   737     0308                     __pbitbssBANK0:
   738     0308                     _send:
   739     0308                     	ds	1
   740                           
   741                           	psect	bssBANK0
   742     0020                     __pbssBANK0:
   743     0020                     _uart_str_idx@PIC16F877A_UART$F375:
   744     0020                     	ds	2
   745     0022                     _spi_str_idx:
   746     0022                     	ds	2
   747     0024                     _uart_str_idx@PIC16F877A_UART$F179:
   748     0024                     	ds	2
   749     0026                     _humid_freq:
   750     0026                     	ds	2
   751     0028                     _temp:
   752     0028                     	ds	2
   753     002A                     _count_humid:
   754     002A                     	ds	2
   755     002C                     _count_temp:
   756     002C                     	ds	2
   757     002E                     _timer1_ovf:
   758     002E                     	ds	2
   759     0030                     _edgeT2:
   760     0030                     	ds	2
   761     0032                     _edgeT1:
   762     0032                     	ds	2
   763     0034                     _hch1000_freq:
   764     0034                     	ds	2
   765     0036                     _uart_str_idx:
   766     0036                     	ds	2
   767     0038                     _hch1000_state:
   768     0038                     	ds	1
   769     0039                     _rcv_buffer:
   770     0039                     	ds	9
   771     0042                     _ModbusFrame:
   772     0042                     	ds	9
   773                           
   774                           	psect	dataBANK1
   775     00A9                     __pdataBANK1:
   776     00A9                     _SS_pin:
   777     00A9                     	ds	8
   778                           
   779                           	psect	inittext
   780     03DC                     init_fetch0:	
   781                           ;	Called with low address in FSR and high address in W
   782                           
   783     03DC  087E               	movf	126,w
   784     03DD  008A               	movwf	10
   785     03DE  087F               	movf	127,w
   786     03DF  0082               	movwf	2
   787     03E0                     init_ram0:	
   788                           ;Called with:
   789                           ;	high address of idata address in btemp 
   790                           ;	low address of idata address in btemp+1 
   791                           ;	low address of data in FSR
   792                           ;	high address + 1 of data in btemp-1
   793                           
   794     03E0  23DC  120A  118A   	fcall	init_fetch0
   795     03E3  0080               	movwf	0
   796     03E4  0A84               	incf	4,f
   797     03E5  0804               	movf	4,w
   798     03E6  067D               	xorwf	125,w
   799     03E7  1903               	btfsc	3,2
   800     03E8  3400               	retlw	0
   801     03E9  0AFF               	incf	127,f
   802     03EA  1903               	btfsc	3,2
   803     03EB  0AFE               	incf	126,f
   804     03EC  2BE0               	goto	init_ram0
   805                           
   806                           	psect	clrtext
   807     045A                     clear_ram0:	
   808                           ;	Called with FSR containing the base address, and
   809                           ;	W with the last address+1
   810                           
   811     045A  0064               	clrwdt	;clear the watchdog before getting into this loop
   812     045B                     clrloop0:
   813     045B  0180               	clrf	0	;clear RAM location pointed to by FSR
   814     045C  0A84               	incf	4,f	;increment pointer
   815     045D  0604               	xorwf	4,w	;XOR with final address
   816     045E  1903               	btfsc	3,2	;have we reached the end yet?
   817     045F  3400               	retlw	0	;all done for this memory range, return
   818     0460  0604               	xorwf	4,w	;XOR again to restore value
   819     0461  2C5B               	goto	clrloop0	;do the next byte
   820                           
   821                           	psect	cstackBANK1
   822     00A0                     __pcstackBANK1:
   823     00A0                     ??_ModbusRTUslaveInit:
   824     00A0                     ??_HCH1000_Init:	
   825                           ; 1 bytes @ 0x0
   826                           
   827     00A0                     ??_SPI_Tx_Byte:	
   828                           ; 1 bytes @ 0x0
   829                           
   830     00A0                     ??_SPI_Master_Init:	
   831                           ; 1 bytes @ 0x0
   832                           
   833     00A0                     ??_UARTTransRcvInit:	
   834                           ; 1 bytes @ 0x0
   835                           
   836     00A0                     ?_timer0SetPrescaler:	
   837                           ; 1 bytes @ 0x0
   838                           
   839     00A0                     ??_timer1Init:	
   840                           ; 1 bytes @ 0x0
   841                           
   842     00A0                     ??_ccp1InterruptInit:	
   843                           ; 1 bytes @ 0x0
   844                           
   845     00A0                     ??_captureRisingInit:	
   846                           ; 1 bytes @ 0x0
   847                           
   848     00A0                     SPI_Tx_Byte@data:	
   849                           ; 1 bytes @ 0x0
   850                           
   851     00A0                     timer0SetPrescaler@prescaler:	
   852                           ; 1 bytes @ 0x0
   853                           
   854                           
   855                           ; 2 bytes @ 0x0
   856     00A0                     	ds	1
   857     00A1                     ?_TC72_Write:
   858     00A1                     TC72_Write@value:	
   859                           ; 1 bytes @ 0x1
   860                           
   861                           
   862                           ; 1 bytes @ 0x1
   863     00A1                     	ds	1
   864     00A2                     ?_timer0TimerInit:
   865     00A2                     ??_TC72_Write:	
   866                           ; 1 bytes @ 0x2
   867                           
   868     00A2                     ??_timer0SetPrescaler:	
   869                           ; 1 bytes @ 0x2
   870                           
   871     00A2                     TC72_Write@address:	
   872                           ; 1 bytes @ 0x2
   873                           
   874     00A2                     timer0TimerInit@prescaler:	
   875                           ; 1 bytes @ 0x2
   876                           
   877                           
   878                           ; 2 bytes @ 0x2
   879     00A2                     	ds	1
   880     00A3                     ??_TC72_Init:
   881                           
   882                           ; 1 bytes @ 0x3
   883     00A3                     	ds	1
   884     00A4                     ??_timer0TimerInit:
   885                           
   886                           ; 1 bytes @ 0x4
   887     00A4                     	ds	2
   888     00A6                     ??_main:
   889                           
   890                           ; 1 bytes @ 0x6
   891     00A6                     	ds	3
   892                           
   893                           	psect	cstackCOMMON
   894     0070                     __pcstackCOMMON:
   895     0070                     ?_Slave_DataHandling:
   896     0070                     ?_HCH1000_startMeasure:	
   897                           ; 1 bit 
   898                           
   899     0070                     ??_HCH1000_startMeasure:	
   900                           ; 1 bytes @ 0x0
   901                           
   902     0070                     ?_HCH1000_timer1Ovf:	
   903                           ; 1 bytes @ 0x0
   904                           
   905     0070                     ??_HCH1000_timer1Ovf:	
   906                           ; 1 bytes @ 0x0
   907                           
   908     0070                     ?_HCH1000_readFreq:	
   909                           ; 1 bytes @ 0x0
   910                           
   911     0070                     ?_ModbusRTUslaveInit:	
   912                           ; 1 bytes @ 0x0
   913                           
   914     0070                     ?_HCH1000_Init:	
   915                           ; 1 bytes @ 0x0
   916                           
   917     0070                     ?_TC72_Init:	
   918                           ; 1 bytes @ 0x0
   919                           
   920     0070                     ?_SPI_Tx_Byte:	
   921                           ; 1 bytes @ 0x0
   922                           
   923     0070                     ?_SPI_Master_Init:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     0070                     ?_SPI_Rx_byte:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     0070                     ??_SPI_Rx_byte:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     0070                     ?_UARTTransRcvInit:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     0070                     ?_UARTsendString:	
   936                           ; 1 bytes @ 0x0
   937                           
   938     0070                     ?_ISR:	
   939                           ; 1 bytes @ 0x0
   940                           
   941     0070                     ?_main:	
   942                           ; 1 bytes @ 0x0
   943                           
   944     0070                     ?_UARTsendChar:	
   945                           ; 1 bytes @ 0x0
   946                           
   947     0070                     ??_UARTsendChar:	
   948                           ; 1 bytes @ 0x0
   949                           
   950     0070                     ?_UARTrcvChar:	
   951                           ; 1 bytes @ 0x0
   952                           
   953     0070                     ??_UARTrcvChar:	
   954                           ; 1 bytes @ 0x0
   955                           
   956     0070                     ?_timer1Init:	
   957                           ; 1 bytes @ 0x0
   958                           
   959     0070                     ?_ccp1InterruptInit:	
   960                           ; 1 bytes @ 0x0
   961                           
   962     0070                     ?_captureRisingInit:	
   963                           ; 1 bytes @ 0x0
   964                           
   965     0070                     ?_HCH1000_stopMeasure:	
   966                           ; 1 bytes @ 0x0
   967                           
   968     0070                     ??_HCH1000_stopMeasure:	
   969                           ; 1 bytes @ 0x0
   970                           
   971     0070                     ?i1_SPI_Tx_Byte:	
   972                           ; 1 bytes @ 0x0
   973                           
   974     0070                     ??i1_SPI_Tx_Byte:	
   975                           ; 1 bytes @ 0x0
   976                           
   977     0070                     ?_HCH1000_getFreq:	
   978                           ; 1 bytes @ 0x0
   979                           
   980     0070                     ?_CRCcheck:	
   981                           ; 2 bytes @ 0x0
   982                           
   983     0070                     ?___lldiv:	
   984                           ; 2 bytes @ 0x0
   985                           
   986     0070                     CRCcheck@len:	
   987                           ; 4 bytes @ 0x0
   988                           
   989     0070                     UARTsendChar@c:	
   990                           ; 1 bytes @ 0x0
   991                           
   992     0070                     UARTrcvChar@c:	
   993                           ; 1 bytes @ 0x0
   994                           
   995     0070                     i1SPI_Tx_Byte@data:	
   996                           ; 1 bytes @ 0x0
   997                           
   998     0070                     ___lldiv@divisor:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001                           
  1002                           ; 4 bytes @ 0x0
  1003     0070                     	ds	1
  1004     0071                     ??_UARTsendString:
  1005     0071                     ?i1_TC72_Write:	
  1006                           ; 1 bytes @ 0x1
  1007                           
  1008     0071                     ?_UARTrcvString:	
  1009                           ; 1 bytes @ 0x1
  1010                           
  1011     0071                     i1TC72_Write@value:	
  1012                           ; 2 bytes @ 0x1
  1013                           
  1014     0071                     UARTrcvString@length:	
  1015                           ; 1 bytes @ 0x1
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x1
  1019     0071                     	ds	1
  1020     0072                     ??_HCH1000_getFreq:
  1021     0072                     ??_CRCcheck:	
  1022                           ; 1 bytes @ 0x2
  1023                           
  1024     0072                     ??i1_TC72_Write:	
  1025                           ; 1 bytes @ 0x2
  1026                           
  1027     0072                     i1TC72_Write@address:	
  1028                           ; 1 bytes @ 0x2
  1029                           
  1030     0072                     UARTsendString@i:	
  1031                           ; 1 bytes @ 0x2
  1032                           
  1033                           
  1034                           ; 2 bytes @ 0x2
  1035     0072                     	ds	1
  1036     0073                     ??_UARTrcvString:
  1037     0073                     ?_TC72_Read:	
  1038                           ; 1 bytes @ 0x3
  1039                           
  1040                           
  1041                           ; 2 bytes @ 0x3
  1042     0073                     	ds	1
  1043     0074                     UARTsendString@str:
  1044     0074                     ___lldiv@dividend:	
  1045                           ; 1 bytes @ 0x4
  1046                           
  1047                           
  1048                           ; 4 bytes @ 0x4
  1049     0074                     	ds	1
  1050     0075                     ??_TC72_Read:
  1051     0075                     CRCcheck@buf:	
  1052                           ; 1 bytes @ 0x5
  1053                           
  1054     0075                     UARTrcvString@rcv_buffer:	
  1055                           ; 1 bytes @ 0x5
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0x5
  1059     0075                     	ds	1
  1060     0076                     CRCcheck@pos:
  1061                           
  1062                           ; 2 bytes @ 0x6
  1063     0076                     	ds	1
  1064     0077                     TC72_Read@msb:
  1065                           
  1066                           ; 1 bytes @ 0x7
  1067     0077                     	ds	1
  1068     0078                     ??___lldiv:
  1069     0078                     TC72_Read@lsb:	
  1070                           ; 1 bytes @ 0x8
  1071                           
  1072     0078                     CRCcheck@index:	
  1073                           ; 1 bytes @ 0x8
  1074                           
  1075                           
  1076                           ; 2 bytes @ 0x8
  1077     0078                     	ds	1
  1078     0079                     ___lldiv@quotient:
  1079                           
  1080                           ; 4 bytes @ 0x9
  1081     0079                     	ds	1
  1082     007A                     CRCcheck@crc:
  1083                           
  1084                           ; 2 bytes @ 0xA
  1085     007A                     	ds	2
  1086     007C                     ??_Slave_SendData:
  1087     007C                     ??_SendErrorFrame:	
  1088                           ; 1 bytes @ 0xC
  1089                           
  1090     007C                     ?_ReceiveData_Check:	
  1091                           ; 1 bytes @ 0xC
  1092                           
  1093     007C                     SendErrorFrame@CRC:	
  1094                           ; 2 bytes @ 0xC
  1095                           
  1096                           
  1097                           ; 2 bytes @ 0xC
  1098     007C                     	ds	1
  1099     007D                     ___lldiv@counter:
  1100                           
  1101                           ; 1 bytes @ 0xD
  1102     007D                     	ds	1
  1103     007E                     ??_HCH1000_readFreq:
  1104     007E                     ??_Slave_DataHandling:	
  1105                           ; 1 bytes @ 0xE
  1106                           
  1107     007E                     ??_ReceiveData_Check:	
  1108                           ; 1 bytes @ 0xE
  1109                           
  1110                           
  1111                           	psect	cstackBANK0
  1112     004B                     __pcstackBANK0:	
  1113                           ; 1 bytes @ 0xE
  1114                           
  1115     004B                     ?_Slave_SendData:
  1116     004B                     ?_SendErrorFrame:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119     004B                     ?_HCH1000_calFreq:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122     004B                     ReceiveData_Check@CRCL:	
  1123                           ; 2 bytes @ 0x0
  1124                           
  1125     004B                     Slave_SendData@temp:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128     004B                     SendErrorFrame@Eframe:	
  1129                           ; 2 bytes @ 0x0
  1130                           
  1131                           
  1132                           ; 2 bytes @ 0x0
  1133     004B                     	ds	1
  1134     004C                     ReceiveData_Check@CRCH:
  1135                           
  1136                           ; 1 bytes @ 0x1
  1137     004C                     	ds	1
  1138     004D                     ??_HCH1000_calFreq:
  1139     004D                     SendErrorFrame@function:	
  1140                           ; 1 bytes @ 0x2
  1141                           
  1142     004D                     Slave_SendData@humid_frq:	
  1143                           ; 1 bytes @ 0x2
  1144                           
  1145     004D                     ReceiveData_Check@CRC:	
  1146                           ; 2 bytes @ 0x2
  1147                           
  1148                           
  1149                           ; 2 bytes @ 0x2
  1150     004D                     	ds	2
  1151     004F                     Slave_SendData@function:
  1152     004F                     ReceiveData_Check@eframe:	
  1153                           ; 1 bytes @ 0x4
  1154                           
  1155                           
  1156                           ; 2 bytes @ 0x4
  1157     004F                     	ds	1
  1158     0050                     Slave_SendData@tempL:
  1159                           
  1160                           ; 1 bytes @ 0x5
  1161     0050                     	ds	1
  1162     0051                     Slave_SendData@tempH:
  1163     0051                     ReceiveData_Check@str:	
  1164                           ; 1 bytes @ 0x6
  1165                           
  1166                           
  1167                           ; 1 bytes @ 0x6
  1168     0051                     	ds	1
  1169     0052                     Slave_SendData@humidL:
  1170     0052                     Slave_DataHandling@eframe:	
  1171                           ; 1 bytes @ 0x7
  1172                           
  1173                           
  1174                           ; 2 bytes @ 0x7
  1175     0052                     	ds	1
  1176     0053                     Slave_SendData@humidH:
  1177                           
  1178                           ; 1 bytes @ 0x8
  1179     0053                     	ds	1
  1180     0054                     Slave_DataHandling@buf:
  1181     0054                     Slave_SendData@CRC:	
  1182                           ; 1 bytes @ 0x9
  1183                           
  1184                           
  1185                           ; 2 bytes @ 0x9
  1186     0054                     	ds	5
  1187     0059                     HCH1000_calFreq@timer1_ticks:
  1188                           
  1189                           ; 4 bytes @ 0xE
  1190     0059                     	ds	4
  1191     005D                     ??_ISR:
  1192                           
  1193                           ; 1 bytes @ 0x12
  1194     005D                     	ds	4
  1195                           
  1196                           	psect	maintext
  1197     02F0                     __pmaintext:	
  1198 ;;
  1199 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1200 ;;
  1201 ;; *************** function _main *****************
  1202 ;; Defined at:
  1203 ;;		line 64 in file "RS485_Slave.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : B00/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0
  1219 ;;      Temps:          0       0       3       0       0
  1220 ;;      Totals:         0       0       3       0       0
  1221 ;;Total ram usage:        3 bytes
  1222 ;; Hardware stack levels required when called: 8
  1223 ;; This function calls:
  1224 ;;		_HCH1000_Init
  1225 ;;		_ModbusRTUslaveInit
  1226 ;;		_TC72_Init
  1227 ;;		_timer0TimerInit
  1228 ;; This function is called by:
  1229 ;;		Startup code after reset
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233     02F0                     _main:	
  1234                           ;psect for function _main
  1235                           
  1236                           
  1237                           ;RS485_Slave.c: 66:     ModbusRTUslaveInit();
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1241     02F0  120A  118A  2462  120A  118A  	fcall	_ModbusRTUslaveInit
  1242                           
  1243                           ;RS485_Slave.c: 68:     TMR0 = 6;
  1244     02F5  3006               	movlw	6
  1245     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1246     02F7  0081               	movwf	1	;volatile
  1247                           
  1248                           ;RS485_Slave.c: 69:     timer0TimerInit(TIMER0_DIV_16);
  1249     02F8  3010               	movlw	16
  1250     02F9  1683               	bsf	3,5	;RP0=1, select bank1
  1251     02FA  00A2               	movwf	timer0TimerInit@prescaler^(0+128)
  1252     02FB  3000               	movlw	0
  1253     02FC  00A3               	movwf	(timer0TimerInit@prescaler^(0+128)+1)
  1254     02FD  120A  118A  23FE  120A  118A  	fcall	_timer0TimerInit
  1255                           
  1256                           ;RS485_Slave.c: 71:     HCH1000_Init();
  1257     0302  120A  118A  246A  120A  118A  	fcall	_HCH1000_Init
  1258                           
  1259                           ;RS485_Slave.c: 73:     TC72_Init();
  1260     0307  120A  118A  2369  120A  118A  	fcall	_TC72_Init
  1261                           
  1262                           ;RS485_Slave.c: 74:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1263     030C  3003               	movlw	3
  1264     030D  1683               	bsf	3,5	;RP0=1, select bank1
  1265     030E  1303               	bcf	3,6	;RP1=0, select bank1
  1266     030F  00A8               	movwf	(??_main^(0+128)+2)
  1267     0310  3008               	movlw	8
  1268     0311  00A7               	movwf	(??_main^(0+128)+1)
  1269     0312  3076               	movlw	118
  1270     0313  00A6               	movwf	??_main^(0+128)
  1271     0314                     u937:
  1272     0314  0BA6               	decfsz	??_main^(0+128),f
  1273     0315  2B14               	goto	u937
  1274     0316  0BA7               	decfsz	(??_main^(0+128)+1),f
  1275     0317  2B14               	goto	u937
  1276     0318  0BA8               	decfsz	(??_main^(0+128)+2),f
  1277     0319  2B14               	goto	u937
  1278     031A  0000               	nop
  1279     031B                     l85:	
  1280                           ;RS485_Slave.c: 76:     while(1)
  1281                           
  1282                           
  1283                           ;RS485_Slave.c: 77:     {;RS485_Slave.c: 78:     }
  1284     031B  2B1B               	goto	l85
  1285     031C                     __end_of_main:
  1286                           
  1287                           	psect	text1
  1288     03FE                     __ptext1:	
  1289 ;; *************** function _timer0TimerInit *****************
  1290 ;; Defined at:
  1291 ;;		line 63 in file "PIC16F877A_timer0.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  prescaler       2    2[BANK1 ] unsigned int 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : B00/100
  1302 ;;		On exit  : B00/100
  1303 ;;		Unchanged: 800/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       0       2       0       0
  1306 ;;      Locals:         0       0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0
  1308 ;;      Totals:         0       0       2       0       0
  1309 ;;Total ram usage:        2 bytes
  1310 ;; Hardware stack levels used: 1
  1311 ;; Hardware stack levels required when called: 6
  1312 ;; This function calls:
  1313 ;;		_timer0SetPrescaler
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318                           
  1319     03FE                     _timer0TimerInit:	
  1320                           ;psect for function _timer0TimerInit
  1321                           
  1322                           
  1323                           ;PIC16F877A_timer0.c: 63: void timer0TimerInit(uint16_t prescaler);PIC16F877A_timer0.c: 
      +                          64: {;PIC16F877A_timer0.c: 66:     TMR0 = 0;
  1324                           
  1325                           ;incstack = 0
  1326                           ; Regs used in _timer0TimerInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1327     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1328     03FF  0181               	clrf	1	;volatile
  1329                           
  1330                           ;PIC16F877A_timer0.c: 68:     T0CS = 0;
  1331     0400  1683               	bsf	3,5	;RP0=1, select bank1
  1332     0401  1281               	bcf	1,5	;volatile
  1333                           
  1334                           ;PIC16F877A_timer0.c: 70:     PSA = 0;
  1335     0402  1181               	bcf	1,3	;volatile
  1336                           
  1337                           ;PIC16F877A_timer0.c: 72:     timer0SetPrescaler(prescaler);
  1338     0403  0823               	movf	(timer0TimerInit@prescaler+1)^(0+128),w
  1339     0404  00A1               	movwf	(timer0SetPrescaler@prescaler+1)^(0+128)
  1340     0405  0822               	movf	timer0TimerInit@prescaler^(0+128),w
  1341     0406  00A0               	movwf	timer0SetPrescaler@prescaler^(0+128)
  1342     0407  120A  118A  2181   	fcall	_timer0SetPrescaler
  1343                           
  1344                           ;PIC16F877A_timer0.c: 74:     TMR0IF = 0;
  1345     040A  110B               	bcf	11,2	;volatile
  1346                           
  1347                           ;PIC16F877A_timer0.c: 75:     TMR0IE = 1;
  1348     040B  168B               	bsf	11,5	;volatile
  1349                           
  1350                           ;PIC16F877A_timer0.c: 76:     GIE = 1;
  1351     040C  178B               	bsf	11,7	;volatile
  1352     040D  0008               	return
  1353     040E                     __end_of_timer0TimerInit:
  1354                           
  1355                           	psect	text2
  1356     0181                     __ptext2:	
  1357 ;; *************** function _timer0SetPrescaler *****************
  1358 ;; Defined at:
  1359 ;;		line 6 in file "PIC16F877A_timer0.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  prescaler       2    0[BANK1 ] unsigned int 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1368 ;; Tracked objects:
  1369 ;;		On entry : B00/100
  1370 ;;		On exit  : B00/100
  1371 ;;		Unchanged: 800/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         0       0       2       0       0
  1374 ;;      Locals:         0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0
  1376 ;;      Totals:         0       0       2       0       0
  1377 ;;Total ram usage:        2 bytes
  1378 ;; Hardware stack levels used: 1
  1379 ;; Hardware stack levels required when called: 5
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_timer0TimerInit
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387     0181                     _timer0SetPrescaler:	
  1388                           ;psect for function _timer0SetPrescaler
  1389                           
  1390                           
  1391                           ;PIC16F877A_timer0.c: 6: static void timer0SetPrescaler(uint16_t prescaler);PIC16F877A_t
      +                          imer0.c: 7: {;PIC16F877A_timer0.c: 8:     switch(prescaler)
  1392                           
  1393                           ;incstack = 0
  1394                           ; Regs used in _timer0SetPrescaler: [wreg-fsr0h+status,2+status,0]
  1395     0181  29A7               	goto	l2283
  1396     0182                     l358:	
  1397                           ;PIC16F877A_timer0.c: 9:     {;PIC16F877A_timer0.c: 10:         case TIMER0_DIV_1:
  1398                           
  1399                           
  1400                           ;PIC16F877A_timer0.c: 11:             PSA = 1;
  1401     0182  1581               	bsf	1,3	;volatile
  1402                           
  1403                           ;PIC16F877A_timer0.c: 12:             PS2 = 0;
  1404     0183  1101               	bcf	1,2	;volatile
  1405                           
  1406                           ;PIC16F877A_timer0.c: 13:             PS1 = 0;
  1407     0184  1081               	bcf	1,1	;volatile
  1408                           
  1409                           ;PIC16F877A_timer0.c: 14:             PS0 = 0;
  1410     0185  1001               	bcf	1,0	;volatile
  1411                           
  1412                           ;PIC16F877A_timer0.c: 15:             break;
  1413     0186  0008               	return
  1414     0187                     l360:	
  1415                           ;PIC16F877A_timer0.c: 16:         case TIMER0_DIV_2:
  1416                           
  1417                           
  1418                           ;PIC16F877A_timer0.c: 17:             PS2 = 0;
  1419     0187  1101               	bcf	1,2	;volatile
  1420                           
  1421                           ;PIC16F877A_timer0.c: 18:             PS1 = 0;
  1422     0188  1081               	bcf	1,1	;volatile
  1423                           
  1424                           ;PIC16F877A_timer0.c: 19:             PS0 = 0;
  1425     0189  1001               	bcf	1,0	;volatile
  1426                           
  1427                           ;PIC16F877A_timer0.c: 20:             break;
  1428     018A  0008               	return
  1429     018B                     l361:	
  1430                           ;PIC16F877A_timer0.c: 21:         case TIMER0_DIV_4:
  1431                           
  1432                           
  1433                           ;PIC16F877A_timer0.c: 22:             PS2 = 0;
  1434     018B  1101               	bcf	1,2	;volatile
  1435                           
  1436                           ;PIC16F877A_timer0.c: 23:             PS1 = 0;
  1437     018C  1081               	bcf	1,1	;volatile
  1438                           
  1439                           ;PIC16F877A_timer0.c: 24:             PS0 = 1;
  1440     018D  1401               	bsf	1,0	;volatile
  1441                           
  1442                           ;PIC16F877A_timer0.c: 25:             break;
  1443     018E  0008               	return
  1444     018F                     l362:	
  1445                           ;PIC16F877A_timer0.c: 26:         case TIMER0_DIV_8:
  1446                           
  1447                           
  1448                           ;PIC16F877A_timer0.c: 27:             PS2 = 0;
  1449     018F  1101               	bcf	1,2	;volatile
  1450                           
  1451                           ;PIC16F877A_timer0.c: 28:             PS1 = 1;
  1452     0190  1481               	bsf	1,1	;volatile
  1453                           
  1454                           ;PIC16F877A_timer0.c: 29:             PS0 = 0;
  1455     0191  1001               	bcf	1,0	;volatile
  1456                           
  1457                           ;PIC16F877A_timer0.c: 30:             break;
  1458     0192  0008               	return
  1459     0193                     l363:	
  1460                           ;PIC16F877A_timer0.c: 31:         case TIMER0_DIV_16:
  1461                           
  1462                           
  1463                           ;PIC16F877A_timer0.c: 32:             PS2 = 0;
  1464     0193  1101               	bcf	1,2	;volatile
  1465                           
  1466                           ;PIC16F877A_timer0.c: 33:             PS1 = 1;
  1467     0194  1481               	bsf	1,1	;volatile
  1468                           
  1469                           ;PIC16F877A_timer0.c: 34:             PS0 = 1;
  1470     0195  1401               	bsf	1,0	;volatile
  1471                           
  1472                           ;PIC16F877A_timer0.c: 35:             break;
  1473     0196  0008               	return
  1474     0197                     l364:	
  1475                           ;PIC16F877A_timer0.c: 36:         case TIMER0_DIV_32:
  1476                           
  1477                           
  1478                           ;PIC16F877A_timer0.c: 37:             PS2 = 1;
  1479     0197  1501               	bsf	1,2	;volatile
  1480                           
  1481                           ;PIC16F877A_timer0.c: 38:             PS1 = 0;
  1482     0198  1081               	bcf	1,1	;volatile
  1483                           
  1484                           ;PIC16F877A_timer0.c: 39:             PS0 = 0;
  1485     0199  1001               	bcf	1,0	;volatile
  1486                           
  1487                           ;PIC16F877A_timer0.c: 40:             break;
  1488     019A  0008               	return
  1489     019B                     l365:	
  1490                           ;PIC16F877A_timer0.c: 41:         case TIMER0_DIV_64:
  1491                           
  1492                           
  1493                           ;PIC16F877A_timer0.c: 42:             PS2 = 1;
  1494     019B  1501               	bsf	1,2	;volatile
  1495                           
  1496                           ;PIC16F877A_timer0.c: 43:             PS1 = 0;
  1497     019C  1081               	bcf	1,1	;volatile
  1498                           
  1499                           ;PIC16F877A_timer0.c: 44:             PS0 = 1;
  1500     019D  1401               	bsf	1,0	;volatile
  1501                           
  1502                           ;PIC16F877A_timer0.c: 45:             break;
  1503     019E  0008               	return
  1504     019F                     l366:	
  1505                           ;PIC16F877A_timer0.c: 46:         case TIMER0_DIV_128:
  1506                           
  1507                           
  1508                           ;PIC16F877A_timer0.c: 47:             PS2 = 1;
  1509     019F  1501               	bsf	1,2	;volatile
  1510                           
  1511                           ;PIC16F877A_timer0.c: 48:             PS1 = 1;
  1512     01A0  1481               	bsf	1,1	;volatile
  1513                           
  1514                           ;PIC16F877A_timer0.c: 49:             PS0 = 0;
  1515     01A1  1001               	bcf	1,0	;volatile
  1516                           
  1517                           ;PIC16F877A_timer0.c: 50:             break;
  1518     01A2  0008               	return
  1519     01A3                     l367:	
  1520                           ;PIC16F877A_timer0.c: 51:         case TIMER0_DIV_256:
  1521                           
  1522                           
  1523                           ;PIC16F877A_timer0.c: 52:             PS2 = 1;
  1524     01A3  1501               	bsf	1,2	;volatile
  1525                           
  1526                           ;PIC16F877A_timer0.c: 53:             PS1 = 1;
  1527     01A4  1481               	bsf	1,1	;volatile
  1528                           
  1529                           ;PIC16F877A_timer0.c: 54:             PS0 = 1;
  1530     01A5  1401               	bsf	1,0	;volatile
  1531                           
  1532                           ;PIC16F877A_timer0.c: 55:             break;
  1533     01A6  0008               	return
  1534     01A7                     l2283:
  1535                           
  1536                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1537                           ; Switch size 1, requested type "simple"
  1538                           ; Number of cases is 2, Range of values is 0 to 1
  1539                           ; switch strategies available:
  1540                           ; Name         Instructions Cycles
  1541                           ; simple_byte            7     4 (average)
  1542                           ; direct_byte           14     8 (fixed)
  1543                           ; jumptable            260     6 (fixed)
  1544                           ;	Chosen strategy is simple_byte
  1545     01A7  0821               	movf	(timer0SetPrescaler@prescaler+1)^(0+128),w
  1546     01A8  3A00               	xorlw	0	; case 0
  1547     01A9  1903               	skipnz
  1548     01AA  29AF               	goto	l2389
  1549     01AB  3A01               	xorlw	1	; case 1
  1550     01AC  1903               	skipnz
  1551     01AD  29C9               	goto	l2391
  1552     01AE  29CE               	goto	l368
  1553     01AF                     l2389:
  1554                           
  1555                           ; Switch size 1, requested type "simple"
  1556                           ; Number of cases is 8, Range of values is 1 to 128
  1557                           ; switch strategies available:
  1558                           ; Name         Instructions Cycles
  1559                           ; simple_byte           25    13 (average)
  1560                           ; jumptable            263     9 (fixed)
  1561                           ;	Chosen strategy is simple_byte
  1562     01AF  0820               	movf	timer0SetPrescaler@prescaler^(0+128),w
  1563     01B0  3A01               	xorlw	1	; case 1
  1564     01B1  1903               	skipnz
  1565     01B2  2982               	goto	l358
  1566     01B3  3A03               	xorlw	3	; case 2
  1567     01B4  1903               	skipnz
  1568     01B5  2987               	goto	l360
  1569     01B6  3A06               	xorlw	6	; case 4
  1570     01B7  1903               	skipnz
  1571     01B8  298B               	goto	l361
  1572     01B9  3A0C               	xorlw	12	; case 8
  1573     01BA  1903               	skipnz
  1574     01BB  298F               	goto	l362
  1575     01BC  3A18               	xorlw	24	; case 16
  1576     01BD  1903               	skipnz
  1577     01BE  2993               	goto	l363
  1578     01BF  3A30               	xorlw	48	; case 32
  1579     01C0  1903               	skipnz
  1580     01C1  2997               	goto	l364
  1581     01C2  3A60               	xorlw	96	; case 64
  1582     01C3  1903               	skipnz
  1583     01C4  299B               	goto	l365
  1584     01C5  3AC0               	xorlw	192	; case 128
  1585     01C6  1903               	skipnz
  1586     01C7  299F               	goto	l366
  1587     01C8  29CE               	goto	l368
  1588     01C9                     l2391:
  1589                           
  1590                           ; Switch size 1, requested type "simple"
  1591                           ; Number of cases is 1, Range of values is 0 to 0
  1592                           ; switch strategies available:
  1593                           ; Name         Instructions Cycles
  1594                           ; simple_byte            4     3 (average)
  1595                           ; direct_byte           11     8 (fixed)
  1596                           ; jumptable            260     6 (fixed)
  1597                           ;	Chosen strategy is simple_byte
  1598     01C9  0820               	movf	timer0SetPrescaler@prescaler^(0+128),w
  1599     01CA  3A00               	xorlw	0	; case 0
  1600     01CB  1903               	skipnz
  1601     01CC  29A3               	goto	l367
  1602     01CD  29CE               	goto	l368
  1603     01CE                     l368:
  1604     01CE  0008               	return
  1605     01CF                     __end_of_timer0SetPrescaler:
  1606                           
  1607                           	psect	text3
  1608     0369                     __ptext3:	
  1609 ;; *************** function _TC72_Init *****************
  1610 ;; Defined at:
  1611 ;;		line 22 in file "TC72.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0, pclath, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : B00/100
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         0       0       0       0       0
  1626 ;;      Locals:         0       0       0       0       0
  1627 ;;      Temps:          0       0       3       0       0
  1628 ;;      Totals:         0       0       3       0       0
  1629 ;;Total ram usage:        3 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 7
  1632 ;; This function calls:
  1633 ;;		_SPI_Master_Init
  1634 ;;		_TC72_Write
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640     0369                     _TC72_Init:	
  1641                           ;psect for function _TC72_Init
  1642                           
  1643                           
  1644                           ;TC72.c: 25:     SPI_Master_Init();
  1645                           
  1646                           ;incstack = 0
  1647                           ; Regs used in _TC72_Init: [wreg+status,2+status,0+pclath+cstack]
  1648     0369  120A  118A  241E  120A  118A  	fcall	_SPI_Master_Init
  1649                           
  1650                           ;TC72.c: 27:     TRISD0 = 0;
  1651     036E  1008               	bcf	8,0	;volatile
  1652                           
  1653                           ;TC72.c: 28:     RD0 = 0;
  1654     036F  1283               	bcf	3,5	;RP0=0, select bank0
  1655     0370  1008               	bcf	8,0	;volatile
  1656                           
  1657                           ;TC72.c: 30:     TC72_Write(0x80, 0x05);
  1658     0371  3005               	movlw	5
  1659     0372  1683               	bsf	3,5	;RP0=1, select bank1
  1660     0373  00A1               	movwf	TC72_Write@value^(0+128)
  1661     0374  3080               	movlw	128
  1662     0375  120A  118A  23ED  120A  118A  	fcall	_TC72_Write
  1663                           
  1664                           ;TC72.c: 32:     _delay((unsigned long)((150)*(16000000/4000.0)));
  1665     037A  3004               	movlw	4
  1666     037B  1683               	bsf	3,5	;RP0=1, select bank1
  1667     037C  1303               	bcf	3,6	;RP1=0, select bank1
  1668     037D  00A5               	movwf	(??_TC72_Init^(0+128)+2)
  1669     037E  300C               	movlw	12
  1670     037F  00A4               	movwf	(??_TC72_Init^(0+128)+1)
  1671     0380  3033               	movlw	51
  1672     0381  00A3               	movwf	??_TC72_Init^(0+128)
  1673     0382                     u947:
  1674     0382  0BA3               	decfsz	??_TC72_Init^(0+128),f
  1675     0383  2B82               	goto	u947
  1676     0384  0BA4               	decfsz	(??_TC72_Init^(0+128)+1),f
  1677     0385  2B82               	goto	u947
  1678     0386  0BA5               	decfsz	(??_TC72_Init^(0+128)+2),f
  1679     0387  2B82               	goto	u947
  1680     0388  0008               	return
  1681     0389                     __end_of_TC72_Init:
  1682                           
  1683                           	psect	text4
  1684     03ED                     __ptext4:	
  1685 ;; *************** function _TC72_Write *****************
  1686 ;; Defined at:
  1687 ;;		line 9 in file "TC72.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  address         1    wreg     unsigned char 
  1690 ;;  value           1    1[BANK1 ] unsigned char 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  address         1    2[BANK1 ] unsigned char 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2, status,0, pclath, cstack
  1697 ;; Tracked objects:
  1698 ;;		On entry : 300/100
  1699 ;;		On exit  : 300/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1702 ;;      Params:         0       0       1       0       0
  1703 ;;      Locals:         0       0       1       0       0
  1704 ;;      Temps:          0       0       0       0       0
  1705 ;;      Totals:         0       0       2       0       0
  1706 ;;Total ram usage:        2 bytes
  1707 ;; Hardware stack levels used: 1
  1708 ;; Hardware stack levels required when called: 6
  1709 ;; This function calls:
  1710 ;;		_SPI_Tx_Byte
  1711 ;; This function is called by:
  1712 ;;		_TC72_Init
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716     03ED                     _TC72_Write:	
  1717                           ;psect for function _TC72_Write
  1718                           
  1719                           
  1720                           ;incstack = 0
  1721                           ; Regs used in _TC72_Write: [wreg+status,2+status,0+pclath+cstack]
  1722                           ;TC72_Write@address stored from wreg
  1723     03ED  00A2               	movwf	TC72_Write@address^(0+128)
  1724                           
  1725                           ;TC72.c: 9: void TC72_Write(uint8_t address, uint8_t value);TC72.c: 10: {;TC72.c: 12:   
      +                            RD0 = 1;
  1726     03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1727     03EF  1408               	bsf	8,0	;volatile
  1728                           
  1729                           ;TC72.c: 14:     SPI_Tx_Byte(address);
  1730     03F0  1683               	bsf	3,5	;RP0=1, select bank1
  1731     03F1  0822               	movf	TC72_Write@address^(0+128),w
  1732     03F2  120A  118A  243B  120A  118A  	fcall	_SPI_Tx_Byte
  1733                           
  1734                           ;TC72.c: 16:     SPI_Tx_Byte(value);
  1735     03F7  1683               	bsf	3,5	;RP0=1, select bank1
  1736     03F8  0821               	movf	TC72_Write@value^(0+128),w
  1737     03F9  120A  118A  243B   	fcall	_SPI_Tx_Byte
  1738                           
  1739                           ;TC72.c: 18:     RD0 = 0;
  1740     03FC  1008               	bcf	8,0	;volatile
  1741     03FD  0008               	return
  1742     03FE                     __end_of_TC72_Write:
  1743                           
  1744                           	psect	text5
  1745     043B                     __ptext5:	
  1746 ;; *************** function _SPI_Tx_Byte *****************
  1747 ;; Defined at:
  1748 ;;		line 80 in file "PIC16F877A_SPI.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  data            1    wreg     unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  data            1    0[BANK1 ] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg
  1757 ;; Tracked objects:
  1758 ;;		On entry : 300/100
  1759 ;;		On exit  : 300/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1762 ;;      Params:         0       0       0       0       0
  1763 ;;      Locals:         0       0       1       0       0
  1764 ;;      Temps:          0       0       0       0       0
  1765 ;;      Totals:         0       0       1       0       0
  1766 ;;Total ram usage:        1 bytes
  1767 ;; Hardware stack levels used: 1
  1768 ;; Hardware stack levels required when called: 5
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_TC72_Write
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776     043B                     _SPI_Tx_Byte:	
  1777                           ;psect for function _SPI_Tx_Byte
  1778                           
  1779                           
  1780                           ;incstack = 0
  1781                           ; Regs used in _SPI_Tx_Byte: [wreg]
  1782                           ;SPI_Tx_Byte@data stored from wreg
  1783     043B  00A0               	movwf	SPI_Tx_Byte@data^(0+128)
  1784                           
  1785                           ;PIC16F877A_SPI.c: 80: void SPI_Tx_Byte(uint8_t data);PIC16F877A_SPI.c: 81: {;PIC16F877A
      +                          _SPI.c: 82:     SSPBUF = data;
  1786     043C  0820               	movf	SPI_Tx_Byte@data^(0+128),w
  1787     043D  1283               	bcf	3,5	;RP0=0, select bank0
  1788     043E  0093               	movwf	19	;volatile
  1789     043F                     l241:	
  1790                           ;PIC16F877A_SPI.c: 83:     while(!SSPSTATbits.BF);
  1791                           
  1792     043F  1683               	bsf	3,5	;RP0=1, select bank1
  1793     0440  1C14               	btfss	20,0	;volatile
  1794     0441  2C3F               	goto	l241
  1795                           
  1796                           ;PIC16F877A_SPI.c: 85:     if(WCOL)
  1797     0442  1283               	bcf	3,5	;RP0=0, select bank0
  1798     0443  1F94               	btfss	20,7	;volatile
  1799     0444  0008               	return
  1800                           
  1801                           ;PIC16F877A_SPI.c: 86:         WCOL = 0;
  1802     0445  1394               	bcf	20,7	;volatile
  1803     0446  0008               	return
  1804     0447                     __end_of_SPI_Tx_Byte:
  1805                           
  1806                           	psect	text6
  1807     041E                     __ptext6:	
  1808 ;; *************** function _SPI_Master_Init *****************
  1809 ;; Defined at:
  1810 ;;		line 6 in file "PIC16F877A_SPI.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		status,2
  1819 ;; Tracked objects:
  1820 ;;		On entry : B00/100
  1821 ;;		On exit  : B00/100
  1822 ;;		Unchanged: 800/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1824 ;;      Params:         0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used: 1
  1830 ;; Hardware stack levels required when called: 5
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_TC72_Init
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838     041E                     _SPI_Master_Init:	
  1839                           ;psect for function _SPI_Master_Init
  1840                           
  1841                           
  1842                           ;PIC16F877A_SPI.c: 9:     TRISD = 0x00;
  1843                           
  1844                           ;incstack = 0
  1845                           ; Regs used in _SPI_Master_Init: [status,2]
  1846     041E  0188               	clrf	8	;volatile
  1847                           
  1848                           ;PIC16F877A_SPI.c: 11:     SSPM3 = 0;
  1849     041F  1283               	bcf	3,5	;RP0=0, select bank0
  1850     0420  1194               	bcf	20,3	;volatile
  1851                           
  1852                           ;PIC16F877A_SPI.c: 12:     SSPM2 = 0;
  1853     0421  1114               	bcf	20,2	;volatile
  1854                           
  1855                           ;PIC16F877A_SPI.c: 13:     SSPM1 = 0;
  1856     0422  1094               	bcf	20,1	;volatile
  1857                           
  1858                           ;PIC16F877A_SPI.c: 14:     SSPM0 = 0;
  1859     0423  1014               	bcf	20,0	;volatile
  1860                           
  1861                           ;PIC16F877A_SPI.c: 16:     SSPEN = 1;
  1862     0424  1694               	bsf	20,5	;volatile
  1863                           
  1864                           ;PIC16F877A_SPI.c: 18:     CKP = 0;
  1865     0425  1214               	bcf	20,4	;volatile
  1866                           
  1867                           ;PIC16F877A_SPI.c: 19:     CKE = 0;
  1868     0426  1683               	bsf	3,5	;RP0=1, select bank1
  1869     0427  1314               	bcf	20,6	;volatile
  1870                           
  1871                           ;PIC16F877A_SPI.c: 21:     SMP = 0;
  1872     0428  1394               	bcf	20,7	;volatile
  1873                           
  1874                           ;PIC16F877A_SPI.c: 23:     TRISC5 = 0;
  1875     0429  1287               	bcf	7,5	;volatile
  1876                           
  1877                           ;PIC16F877A_SPI.c: 24:     TRISC4 = 1;
  1878     042A  1607               	bsf	7,4	;volatile
  1879                           
  1880                           ;PIC16F877A_SPI.c: 25:     TRISC3 = 0;
  1881     042B  1187               	bcf	7,3	;volatile
  1882     042C  0008               	return
  1883     042D                     __end_of_SPI_Master_Init:
  1884                           
  1885                           	psect	text7
  1886     0462                     __ptext7:	
  1887 ;; *************** function _ModbusRTUslaveInit *****************
  1888 ;; Defined at:
  1889 ;;		line 4 in file "Slave_ModbusRTU.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : B00/0
  1900 ;;		On exit  : B00/100
  1901 ;;		Unchanged: 800/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1903 ;;      Params:         0       0       0       0       0
  1904 ;;      Locals:         0       0       0       0       0
  1905 ;;      Temps:          0       0       0       0       0
  1906 ;;      Totals:         0       0       0       0       0
  1907 ;;Total ram usage:        0 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 6
  1910 ;; This function calls:
  1911 ;;		_UARTTransRcvInit
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917     0462                     _ModbusRTUslaveInit:	
  1918                           ;psect for function _ModbusRTUslaveInit
  1919                           
  1920                           
  1921                           ;Slave_ModbusRTU.c: 7:     TRISB1 = 0;
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _ModbusRTUslaveInit: [wreg+status,2+status,0+pclath+cstack]
  1925     0462  1683               	bsf	3,5	;RP0=1, select bank1
  1926     0463  1086               	bcf	6,1	;volatile
  1927                           
  1928                           ;Slave_ModbusRTU.c: 8:     RB1 = 0;
  1929     0464  1283               	bcf	3,5	;RP0=0, select bank0
  1930     0465  1086               	bcf	6,1	;volatile
  1931                           
  1932                           ;Slave_ModbusRTU.c: 10:     UARTTransRcvInit();
  1933     0466  120A  118A  23C6   	fcall	_UARTTransRcvInit
  1934     0469  0008               	return
  1935     046A                     __end_of_ModbusRTUslaveInit:
  1936                           
  1937                           	psect	text8
  1938     03C6                     __ptext8:	
  1939 ;; *************** function _UARTTransRcvInit *****************
  1940 ;; Defined at:
  1941 ;;		line 48 in file "PIC16F877A_UART.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg
  1950 ;; Tracked objects:
  1951 ;;		On entry : B00/0
  1952 ;;		On exit  : B00/100
  1953 ;;		Unchanged: 800/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1955 ;;      Params:         0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0
  1958 ;;      Totals:         0       0       0       0       0
  1959 ;;Total ram usage:        0 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 5
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_ModbusRTUslaveInit
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969     03C6                     _UARTTransRcvInit:	
  1970                           ;psect for function _UARTTransRcvInit
  1971                           
  1972                           
  1973                           ;PIC16F877A_UART.c: 51:     TRISC6 = 1;
  1974                           
  1975                           ;incstack = 0
  1976                           ; Regs used in _UARTTransRcvInit: [wreg]
  1977     03C6  1683               	bsf	3,5	;RP0=1, select bank1
  1978     03C7  1707               	bsf	7,6	;volatile
  1979                           
  1980                           ;PIC16F877A_UART.c: 52:     TRISC7 = 1;
  1981     03C8  1787               	bsf	7,7	;volatile
  1982                           
  1983                           ;PIC16F877A_UART.c: 54:     SPEN = 1;
  1984     03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1985     03CA  1798               	bsf	24,7	;volatile
  1986                           
  1987                           ;PIC16F877A_UART.c: 56:     SYNC = 0;
  1988     03CB  1683               	bsf	3,5	;RP0=1, select bank1
  1989     03CC  1218               	bcf	24,4	;volatile
  1990                           
  1991                           ;PIC16F877A_UART.c: 58:     TX9 = 0;
  1992     03CD  1318               	bcf	24,6	;volatile
  1993                           
  1994                           ;PIC16F877A_UART.c: 59:     RX9 = 0;
  1995     03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1996     03CF  1318               	bcf	24,6	;volatile
  1997                           
  1998                           ;PIC16F877A_UART.c: 61:     TXEN = 1;
  1999     03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2000     03D1  1698               	bsf	24,5	;volatile
  2001                           
  2002                           ;PIC16F877A_UART.c: 62:     CREN = 1;
  2003     03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2004     03D3  1618               	bsf	24,4	;volatile
  2005                           
  2006                           ;PIC16F877A_UART.c: 64:     BRGH = 1;
  2007     03D4  1683               	bsf	3,5	;RP0=1, select bank1
  2008     03D5  1518               	bsf	24,2	;volatile
  2009                           
  2010                           ;PIC16F877A_UART.c: 65:     SPBRG = ((16000000) / 57600) / 16 - 1;
  2011     03D6  3010               	movlw	16
  2012     03D7  0099               	movwf	25	;volatile
  2013                           
  2014                           ;PIC16F877A_UART.c: 67:     RCIE = 1;
  2015     03D8  168C               	bsf	12,5	;volatile
  2016                           
  2017                           ;PIC16F877A_UART.c: 68:     PEIE = 1;
  2018     03D9  170B               	bsf	11,6	;volatile
  2019                           
  2020                           ;PIC16F877A_UART.c: 69:     GIE = 1;
  2021     03DA  178B               	bsf	11,7	;volatile
  2022     03DB  0008               	return
  2023     03DC                     __end_of_UARTTransRcvInit:
  2024                           
  2025                           	psect	text9
  2026     046A                     __ptext9:	
  2027 ;; *************** function _HCH1000_Init *****************
  2028 ;; Defined at:
  2029 ;;		line 22 in file "HCH_1000.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		status,2, status,0, pclath, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : B00/100
  2040 ;;		On exit  : B00/100
  2041 ;;		Unchanged: 800/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2043 ;;      Params:         0       0       0       0       0
  2044 ;;      Locals:         0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0
  2046 ;;      Totals:         0       0       0       0       0
  2047 ;;Total ram usage:        0 bytes
  2048 ;; Hardware stack levels used: 1
  2049 ;; Hardware stack levels required when called: 7
  2050 ;; This function calls:
  2051 ;;		_captureRisingInit
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057     046A                     _HCH1000_Init:	
  2058                           ;psect for function _HCH1000_Init
  2059                           
  2060                           
  2061                           ;HCH_1000.c: 25:     captureRisingInit();
  2062                           
  2063                           ;incstack = 0
  2064                           ; Regs used in _HCH1000_Init: [status,2+status,0+pclath+cstack]
  2065     046A  120A  118A  240E   	fcall	_captureRisingInit
  2066                           
  2067                           ;HCH_1000.c: 27:     TMR1IF = 0;
  2068     046D  1283               	bcf	3,5	;RP0=0, select bank0
  2069     046E  100C               	bcf	12,0	;volatile
  2070                           
  2071                           ;HCH_1000.c: 28:     TMR1IE = 1;
  2072     046F  1683               	bsf	3,5	;RP0=1, select bank1
  2073     0470  140C               	bsf	12,0	;volatile
  2074     0471  0008               	return
  2075     0472                     __end_of_HCH1000_Init:
  2076                           
  2077                           	psect	text10
  2078     040E                     __ptext10:	
  2079 ;; *************** function _captureRisingInit *****************
  2080 ;; Defined at:
  2081 ;;		line 40 in file "PIC16F877A_input_capture.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		status,2, status,0, pclath, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : B00/100
  2092 ;;		On exit  : B00/100
  2093 ;;		Unchanged: 800/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2095 ;;      Params:         0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; Hardware stack levels required when called: 6
  2102 ;; This function calls:
  2103 ;;		_ccp1InterruptInit
  2104 ;;		_timer1Init
  2105 ;; This function is called by:
  2106 ;;		_HCH1000_Init
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110     040E                     _captureRisingInit:	
  2111                           ;psect for function _captureRisingInit
  2112                           
  2113                           
  2114                           ;PIC16F877A_input_capture.c: 43:     timer1Init();
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _captureRisingInit: [status,2+status,0+pclath+cstack]
  2118     040E  120A  118A  2472  120A  118A  	fcall	_timer1Init
  2119                           
  2120                           ;PIC16F877A_input_capture.c: 45:     TRISC2 = 1;
  2121     0413  1683               	bsf	3,5	;RP0=1, select bank1
  2122     0414  1507               	bsf	7,2	;volatile
  2123                           
  2124                           ;PIC16F877A_input_capture.c: 47:     CCP1M3 = 0;
  2125     0415  1283               	bcf	3,5	;RP0=0, select bank0
  2126     0416  1197               	bcf	23,3	;volatile
  2127                           
  2128                           ;PIC16F877A_input_capture.c: 48:     CCP1M2 = 1;
  2129     0417  1517               	bsf	23,2	;volatile
  2130                           
  2131                           ;PIC16F877A_input_capture.c: 49:     CCP1M1 = 0;
  2132     0418  1097               	bcf	23,1	;volatile
  2133                           
  2134                           ;PIC16F877A_input_capture.c: 50:     CCP1M0 = 1;
  2135     0419  1417               	bsf	23,0	;volatile
  2136                           
  2137                           ;PIC16F877A_input_capture.c: 52:     ccp1InterruptInit();
  2138     041A  120A  118A  2498   	fcall	_ccp1InterruptInit
  2139     041D  0008               	return
  2140     041E                     __end_of_captureRisingInit:
  2141                           
  2142                           	psect	text11
  2143     0472                     __ptext11:	
  2144 ;; *************** function _timer1Init *****************
  2145 ;; Defined at:
  2146 ;;		line 6 in file "PIC16F877A_input_capture.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;		None
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;		None
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		status,2
  2155 ;; Tracked objects:
  2156 ;;		On entry : B00/100
  2157 ;;		On exit  : B00/0
  2158 ;;		Unchanged: 800/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2160 ;;      Params:         0       0       0       0       0
  2161 ;;      Locals:         0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0
  2163 ;;      Totals:         0       0       0       0       0
  2164 ;;Total ram usage:        0 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; Hardware stack levels required when called: 5
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_captureRisingInit
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174     0472                     _timer1Init:	
  2175                           ;psect for function _timer1Init
  2176                           
  2177                           
  2178                           ;PIC16F877A_input_capture.c: 9:     TMR1 = 0;
  2179                           
  2180                           ;incstack = 0
  2181                           ; Regs used in _timer1Init: [status,2]
  2182     0472  1283               	bcf	3,5	;RP0=0, select bank0
  2183     0473  018E               	clrf	14	;volatile
  2184     0474  018F               	clrf	15	;volatile
  2185                           
  2186                           ;PIC16F877A_input_capture.c: 11:     TMR1CS = 0;
  2187     0475  1090               	bcf	16,1	;volatile
  2188                           
  2189                           ;PIC16F877A_input_capture.c: 13:     T1CKPS1 = 0;
  2190     0476  1290               	bcf	16,5	;volatile
  2191                           
  2192                           ;PIC16F877A_input_capture.c: 14:     T1CKPS0 = 0;
  2193     0477  1210               	bcf	16,4	;volatile
  2194                           
  2195                           ;PIC16F877A_input_capture.c: 16:     TMR1ON = 1;
  2196     0478  1410               	bsf	16,0	;volatile
  2197     0479  0008               	return
  2198     047A                     __end_of_timer1Init:
  2199                           
  2200                           	psect	text12
  2201     0498                     __ptext12:	
  2202 ;; *************** function _ccp1InterruptInit *****************
  2203 ;; Defined at:
  2204 ;;		line 20 in file "PIC16F877A_input_capture.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		None
  2213 ;; Tracked objects:
  2214 ;;		On entry : B00/0
  2215 ;;		On exit  : B00/100
  2216 ;;		Unchanged: 800/0
  2217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2218 ;;      Params:         0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0
  2221 ;;      Totals:         0       0       0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; Hardware stack levels required when called: 5
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_captureRisingInit
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232     0498                     _ccp1InterruptInit:	
  2233                           ;psect for function _ccp1InterruptInit
  2234                           
  2235                           
  2236                           ;PIC16F877A_input_capture.c: 22:     CCP1IF = 0;
  2237                           
  2238                           ;incstack = 0
  2239                           ; Regs used in _ccp1InterruptInit: []
  2240     0498  110C               	bcf	12,2	;volatile
  2241                           
  2242                           ;PIC16F877A_input_capture.c: 24:     CCP1IE = 1;
  2243     0499  1683               	bsf	3,5	;RP0=1, select bank1
  2244     049A  150C               	bsf	12,2	;volatile
  2245                           
  2246                           ;PIC16F877A_input_capture.c: 26:     PEIE = 1;
  2247     049B  170B               	bsf	11,6	;volatile
  2248                           
  2249                           ;PIC16F877A_input_capture.c: 28:     GIE = 1;
  2250     049C  178B               	bsf	11,7	;volatile
  2251     049D  0008               	return
  2252     049E                     __end_of_ccp1InterruptInit:
  2253                           
  2254                           	psect	text13
  2255     002E                     __ptext13:	
  2256 ;; *************** function _ISR *****************
  2257 ;; Defined at:
  2258 ;;		line 18 in file "RS485_Slave.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 300/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2272 ;;      Params:         0       0       0       0       0
  2273 ;;      Locals:         0       0       0       0       0
  2274 ;;      Temps:          0       4       0       0       0
  2275 ;;      Totals:         0       4       0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used: 1
  2278 ;; Hardware stack levels required when called: 4
  2279 ;; This function calls:
  2280 ;;		_HCH1000_getFreq
  2281 ;;		_HCH1000_readFreq
  2282 ;;		_HCH1000_startMeasure
  2283 ;;		_HCH1000_timer1Ovf
  2284 ;;		_Slave_DataHandling
  2285 ;;		_Slave_SendData
  2286 ;;		_TC72_Read
  2287 ;;		_UARTrcvString
  2288 ;; This function is called by:
  2289 ;;		Interrupt level 1
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293     002E                     _ISR:	
  2294                           ;psect for function _ISR
  2295                           
  2296                           
  2297                           ;RS485_Slave.c: 20:     if(TMR0IF){
  2298     002E  1D0B               	btfss	11,2	;volatile
  2299     002F  285F               	goto	i1l2147
  2300                           
  2301                           ;RS485_Slave.c: 21:         TMR0 = 6;
  2302     0030  3006               	movlw	6
  2303     0031  0081               	movwf	1	;volatile
  2304                           
  2305                           ;RS485_Slave.c: 23:         if(count_temp++ == 500){
  2306     0032  3001               	movlw	1
  2307     0033  07AC               	addwf	_count_temp,f
  2308     0034  1803               	skipnc
  2309     0035  0AAD               	incf	_count_temp+1,f
  2310     0036  3000               	movlw	0
  2311     0037  07AD               	addwf	_count_temp+1,f
  2312     0038  30F5               	movlw	245
  2313     0039  062C               	xorwf	_count_temp,w
  2314     003A  1D03               	skipz
  2315     003B  284A               	goto	i1l2139
  2316     003C  032D               	decf	_count_temp+1,w
  2317     003D  1D03               	btfss	3,2
  2318     003E  284A               	goto	i1l2139
  2319                           
  2320                           ;RS485_Slave.c: 24:             count_temp = 0;
  2321     003F  01AC               	clrf	_count_temp
  2322     0040  01AD               	clrf	_count_temp+1
  2323                           
  2324                           ;RS485_Slave.c: 25:             temp = TC72_Read();
  2325     0041  120A  118A  231C  120A  118A  	fcall	_TC72_Read
  2326     0046  0874               	movf	?_TC72_Read+1,w
  2327     0047  00A9               	movwf	_temp+1
  2328     0048  0873               	movf	?_TC72_Read,w
  2329     0049  00A8               	movwf	_temp
  2330     004A                     i1l2139:
  2331                           
  2332                           ;RS485_Slave.c: 28:         if(count_humid++ == 1000){
  2333     004A  3001               	movlw	1
  2334     004B  07AA               	addwf	_count_humid,f
  2335     004C  1803               	skipnc
  2336     004D  0AAB               	incf	_count_humid+1,f
  2337     004E  3000               	movlw	0
  2338     004F  07AB               	addwf	_count_humid+1,f
  2339     0050  30E9               	movlw	233
  2340     0051  062A               	xorwf	_count_humid,w
  2341     0052  3003               	movlw	3
  2342     0053  1903               	skipnz
  2343     0054  062B               	xorwf	_count_humid+1,w
  2344     0055  1D03               	btfss	3,2
  2345     0056  285E               	goto	i1l2145
  2346                           
  2347                           ;RS485_Slave.c: 29:             count_humid = 0;
  2348     0057  01AA               	clrf	_count_humid
  2349     0058  01AB               	clrf	_count_humid+1
  2350                           
  2351                           ;RS485_Slave.c: 30:             HCH1000_startMeasure();
  2352     0059  120A  118A  249E  120A  118A  	fcall	_HCH1000_startMeasure
  2353     005E                     i1l2145:
  2354                           
  2355                           ;RS485_Slave.c: 33:         TMR0IF = 0;
  2356     005E  110B               	bcf	11,2	;volatile
  2357     005F                     i1l2147:
  2358                           
  2359                           ;RS485_Slave.c: 36:     if(TMR1IF)
  2360     005F  1C0C               	btfss	12,0	;volatile
  2361     0060  2869               	goto	i1l2155
  2362                           
  2363                           ;RS485_Slave.c: 37:     {;RS485_Slave.c: 38:         TMR1 = 0;
  2364     0061  018E               	clrf	14	;volatile
  2365     0062  018F               	clrf	15	;volatile
  2366                           
  2367                           ;RS485_Slave.c: 39:         HCH1000_timer1Ovf();
  2368     0063  120A  118A  2491  120A  118A  	fcall	_HCH1000_timer1Ovf
  2369                           
  2370                           ;RS485_Slave.c: 40:         TMR1IF = 0;
  2371     0068  100C               	bcf	12,0	;volatile
  2372     0069                     i1l2155:
  2373                           
  2374                           ;RS485_Slave.c: 43:     if(CCP1IF)
  2375     0069  1D0C               	btfss	12,2	;volatile
  2376     006A  287D               	goto	i1l2163
  2377                           
  2378                           ;RS485_Slave.c: 44:     {;RS485_Slave.c: 45:         if(HCH1000_readFreq())
  2379     006B  120A  118A  2389  120A  118A  	fcall	_HCH1000_readFreq
  2380     0070  3A00               	xorlw	0
  2381     0071  1903               	skipnz
  2382     0072  287C               	goto	i1l2161
  2383                           
  2384                           ;RS485_Slave.c: 46:         {;RS485_Slave.c: 47:             humid_freq = HCH1000_getFre
      +                          q();
  2385     0073  120A  118A  24A8  120A  118A  	fcall	_HCH1000_getFreq
  2386     0078  0871               	movf	?_HCH1000_getFreq+1,w
  2387     0079  00A7               	movwf	_humid_freq+1
  2388     007A  0870               	movf	?_HCH1000_getFreq,w
  2389     007B  00A6               	movwf	_humid_freq
  2390     007C                     i1l2161:
  2391                           
  2392                           ;RS485_Slave.c: 49:         CCP1IF = 0;
  2393     007C  110C               	bcf	12,2	;volatile
  2394     007D                     i1l2163:
  2395                           
  2396                           ;RS485_Slave.c: 52:     if(RCIF)
  2397     007D  1E8C               	btfss	12,5	;volatile
  2398     007E  28A4               	goto	i1l80
  2399                           
  2400                           ;RS485_Slave.c: 53:     {;RS485_Slave.c: 54:         if(UARTrcvString((char*)rcv_buffer,
      +                           4 + 4))
  2401     007F  3008               	movlw	8
  2402     0080  00F1               	movwf	UARTrcvString@length
  2403     0081  3000               	movlw	0
  2404     0082  00F2               	movwf	UARTrcvString@length+1
  2405     0083  3039               	movlw	(low (_rcv_buffer| 0))& (0+255)
  2406     0084  120A  118A  221C  120A  118A  	fcall	_UARTrcvString
  2407     0089  0871               	movf	?_UARTrcvString,w
  2408     008A  0472               	iorwf	?_UARTrcvString+1,w
  2409     008B  1903               	btfsc	3,2
  2410     008C  28A4               	goto	i1l80
  2411                           
  2412                           ;RS485_Slave.c: 55:         {;RS485_Slave.c: 56:             if(Slave_DataHandling(rcv_b
      +                          uffer))
  2413     008D  3039               	movlw	(low (_rcv_buffer| 0))& (0+255)
  2414     008E  120A  118A  22C2  120A  118A  	fcall	_Slave_DataHandling
  2415     0093  1C03               	btfss	3,0
  2416     0094  28A4               	goto	i1l80
  2417                           
  2418                           ;RS485_Slave.c: 57:             {;RS485_Slave.c: 58:                 Slave_SendData(temp
      +                          , humid_freq, 0x33);
  2419     0095  0829               	movf	_temp+1,w
  2420     0096  00CC               	movwf	Slave_SendData@temp+1
  2421     0097  0828               	movf	_temp,w
  2422     0098  00CB               	movwf	Slave_SendData@temp
  2423     0099  0827               	movf	_humid_freq+1,w
  2424     009A  00CE               	movwf	Slave_SendData@humid_frq+1
  2425     009B  0826               	movf	_humid_freq,w
  2426     009C  00CD               	movwf	Slave_SendData@humid_frq
  2427     009D  3033               	movlw	51
  2428     009E  00CF               	movwf	Slave_SendData@function
  2429     009F  120A  118A  2293  120A  118A  	fcall	_Slave_SendData
  2430     00A4                     i1l80:
  2431     00A4  0860               	movf	??_ISR+3,w
  2432     00A5  00FF               	movwf	127
  2433     00A6  085F               	movf	??_ISR+2,w
  2434     00A7  008A               	movwf	10
  2435     00A8  085E               	movf	??_ISR+1,w
  2436     00A9  0084               	movwf	4
  2437     00AA  0E5D               	swapf	??_ISR,w
  2438     00AB  0083               	movwf	3
  2439     00AC  0EFE               	swapf	126,f
  2440     00AD  0E7E               	swapf	126,w
  2441     00AE  0009               	retfie
  2442     00AF                     __end_of_ISR:
  2443                           
  2444                           	psect	intentry
  2445     0004                     __pintentry:	
  2446                           ;incstack = 0
  2447                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2448                           
  2449     0004                     interrupt_function:
  2450     007E                     saved_w	set	btemp
  2451     0004  00FE               	movwf	btemp
  2452     0005  0E03               	swapf	3,w
  2453     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2454     0007  1303               	bcf	3,6	;RP1=0, select bank0
  2455     0008  00DD               	movwf	??_ISR
  2456     0009  0804               	movf	4,w
  2457     000A  00DE               	movwf	??_ISR+1
  2458     000B  080A               	movf	10,w
  2459     000C  00DF               	movwf	??_ISR+2
  2460     000D  087F               	movf	btemp+1,w
  2461     000E  00E0               	movwf	??_ISR+3
  2462     000F  120A  118A  282E   	ljmp	_ISR
  2463                           
  2464                           	psect	text14
  2465     021C                     __ptext14:	
  2466 ;; *************** function _UARTrcvString *****************
  2467 ;; Defined at:
  2468 ;;		line 101 in file "PIC16F877A_UART.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  rcv_buffer      1    wreg     PTR unsigned char 
  2471 ;;		 -> rcv_buffer(9), 
  2472 ;;  length          2    1[COMMON] unsigned int 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  rcv_buffer      1    5[COMMON] PTR unsigned char 
  2475 ;;		 -> rcv_buffer(9), 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  2    1[COMMON] int 
  2478 ;; Registers used:
  2479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 300/0
  2482 ;;		On exit  : B00/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2485 ;;      Params:         2       0       0       0       0
  2486 ;;      Locals:         1       0       0       0       0
  2487 ;;      Temps:          2       0       0       0       0
  2488 ;;      Totals:         5       0       0       0       0
  2489 ;;Total ram usage:        5 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 1
  2492 ;; This function calls:
  2493 ;;		_UARTrcvChar
  2494 ;; This function is called by:
  2495 ;;		_ISR
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499     021C                     _UARTrcvString:	
  2500                           ;psect for function _UARTrcvString
  2501                           
  2502                           
  2503                           ;incstack = 0
  2504                           ; Regs used in _UARTrcvString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2505                           ;UARTrcvString@rcv_buffer stored from wreg
  2506     021C  00F5               	movwf	UARTrcvString@rcv_buffer
  2507                           
  2508                           ;PIC16F877A_UART.c: 101: int UARTrcvString(char *rcv_buffer, uint16_t length);PIC16F877A
      +                          _UART.c: 102: {;PIC16F877A_UART.c: 104:     if (OERR)
  2509     021D  1C98               	btfss	24,1	;volatile
  2510     021E  2A21               	goto	i1l2019
  2511                           
  2512                           ;PIC16F877A_UART.c: 105:     {;PIC16F877A_UART.c: 106:         CREN = 0;
  2513     021F  1218               	bcf	24,4	;volatile
  2514                           
  2515                           ;PIC16F877A_UART.c: 107:         CREN = 1;
  2516     0220  1618               	bsf	24,4	;volatile
  2517     0221                     i1l2019:
  2518                           
  2519                           ;PIC16F877A_UART.c: 109:     if (uart_str_idx == length - 1)
  2520     0221  0871               	movf	UARTrcvString@length,w
  2521     0222  3EFF               	addlw	255
  2522     0223  00F3               	movwf	??_UARTrcvString
  2523     0224  0872               	movf	UARTrcvString@length+1,w
  2524     0225  1803               	skipnc
  2525     0226  3E01               	addlw	1
  2526     0227  3EFF               	addlw	255
  2527     0228  00F4               	movwf	??_UARTrcvString+1
  2528     0229  0821               	movf	_uart_str_idx@PIC16F877A_UART$F375+1,w
  2529     022A  0674               	xorwf	??_UARTrcvString+1,w
  2530     022B  1D03               	skipz
  2531     022C  2A2F               	goto	u76_25
  2532     022D  0820               	movf	_uart_str_idx@PIC16F877A_UART$F375,w
  2533     022E  0673               	xorwf	??_UARTrcvString,w
  2534     022F                     u76_25:
  2535     022F  1D03               	skipz
  2536     0230  2A4E               	goto	i1l2035
  2537                           
  2538                           ;PIC16F877A_UART.c: 110:     {;PIC16F877A_UART.c: 111:         rcv_buffer[uart_str_idx++
      +                          ] = UARTrcvChar();
  2539     0231  0820               	movf	_uart_str_idx@PIC16F877A_UART$F375,w
  2540     0232  0775               	addwf	UARTrcvString@rcv_buffer,w
  2541     0233  00F3               	movwf	??_UARTrcvString
  2542     0234  0873               	movf	??_UARTrcvString,w
  2543     0235  0084               	movwf	4
  2544     0236  120A  118A  247A   	fcall	_UARTrcvChar
  2545     0239  1383               	bcf	3,7	;select IRP bank0
  2546     023A  0080               	movwf	0
  2547     023B  3001               	movlw	1
  2548     023C  07A0               	addwf	_uart_str_idx@PIC16F877A_UART$F375,f
  2549     023D  1803               	skipnc
  2550     023E  0AA1               	incf	_uart_str_idx@PIC16F877A_UART$F375+1,f
  2551     023F  3000               	movlw	0
  2552     0240  07A1               	addwf	_uart_str_idx@PIC16F877A_UART$F375+1,f
  2553                           
  2554                           ;PIC16F877A_UART.c: 112:         rcv_buffer[uart_str_idx] = '\0';
  2555     0241  0820               	movf	_uart_str_idx@PIC16F877A_UART$F375,w
  2556     0242  0775               	addwf	UARTrcvString@rcv_buffer,w
  2557     0243  00F3               	movwf	??_UARTrcvString
  2558     0244  0873               	movf	??_UARTrcvString,w
  2559     0245  0084               	movwf	4
  2560     0246  0180               	clrf	0
  2561                           
  2562                           ;PIC16F877A_UART.c: 113:         uart_str_idx = 0;
  2563     0247  01A0               	clrf	_uart_str_idx@PIC16F877A_UART$F375
  2564     0248  01A1               	clrf	_uart_str_idx@PIC16F877A_UART$F375+1
  2565                           
  2566                           ;PIC16F877A_UART.c: 114:         return 1;
  2567     0249  3001               	movlw	1
  2568     024A  00F1               	movwf	?_UARTrcvString
  2569     024B  3000               	movlw	0
  2570     024C  00F2               	movwf	?_UARTrcvString+1
  2571     024D  0008               	return
  2572     024E                     i1l2035:
  2573                           
  2574                           ;PIC16F877A_UART.c: 117:     {;PIC16F877A_UART.c: 118:         rcv_buffer[uart_str_idx++
      +                          ] = UARTrcvChar();
  2575     024E  0820               	movf	_uart_str_idx@PIC16F877A_UART$F375,w
  2576     024F  0775               	addwf	UARTrcvString@rcv_buffer,w
  2577     0250  00F3               	movwf	??_UARTrcvString
  2578     0251  0873               	movf	??_UARTrcvString,w
  2579     0252  0084               	movwf	4
  2580     0253  120A  118A  247A   	fcall	_UARTrcvChar
  2581     0256  1383               	bcf	3,7	;select IRP bank0
  2582     0257  0080               	movwf	0
  2583     0258  3001               	movlw	1
  2584     0259  07A0               	addwf	_uart_str_idx@PIC16F877A_UART$F375,f
  2585     025A  1803               	skipnc
  2586     025B  0AA1               	incf	_uart_str_idx@PIC16F877A_UART$F375+1,f
  2587     025C  3000               	movlw	0
  2588     025D  07A1               	addwf	_uart_str_idx@PIC16F877A_UART$F375+1,f
  2589                           
  2590                           ;PIC16F877A_UART.c: 119:         return 0;
  2591     025E  01F1               	clrf	?_UARTrcvString
  2592     025F  01F2               	clrf	?_UARTrcvString+1
  2593     0260  0008               	return
  2594     0261                     __end_of_UARTrcvString:
  2595                           
  2596                           	psect	text15
  2597     047A                     __ptext15:	
  2598 ;; *************** function _UARTrcvChar *****************
  2599 ;; Defined at:
  2600 ;;		line 88 in file "PIC16F877A_UART.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  c               1    0[COMMON] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      unsigned char 
  2607 ;; Registers used:
  2608 ;;		wreg
  2609 ;; Tracked objects:
  2610 ;;		On entry : 300/0
  2611 ;;		On exit  : 300/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2614 ;;      Params:         0       0       0       0       0
  2615 ;;      Locals:         1       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0
  2617 ;;      Totals:         1       0       0       0       0
  2618 ;;Total ram usage:        1 bytes
  2619 ;; Hardware stack levels used: 1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_UARTrcvString
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627     047A                     _UARTrcvChar:	
  2628                           ;psect for function _UARTrcvChar
  2629                           
  2630                           
  2631                           ;PIC16F877A_UART.c: 91:     if (OERR)
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _UARTrcvChar: [wreg]
  2635     047A  1C98               	btfss	24,1	;volatile
  2636     047B  2C7E               	goto	i1l1923
  2637                           
  2638                           ;PIC16F877A_UART.c: 92:     {;PIC16F877A_UART.c: 93:         CREN = 0;
  2639     047C  1218               	bcf	24,4	;volatile
  2640                           
  2641                           ;PIC16F877A_UART.c: 94:         CREN = 1;
  2642     047D  1618               	bsf	24,4	;volatile
  2643     047E                     i1l1923:
  2644                           
  2645                           ;PIC16F877A_UART.c: 96:     char c = RCREG;
  2646     047E  081A               	movf	26,w	;volatile
  2647     047F  00F0               	movwf	UARTrcvChar@c
  2648                           
  2649                           ;PIC16F877A_UART.c: 97:     return c;
  2650     0480  0870               	movf	UARTrcvChar@c,w
  2651     0481  0008               	return
  2652     0482                     __end_of_UARTrcvChar:
  2653                           
  2654                           	psect	text16
  2655     031C                     __ptext16:	
  2656 ;; *************** function _TC72_Read *****************
  2657 ;; Defined at:
  2658 ;;		line 36 in file "TC72.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  lsb             1    8[COMMON] unsigned char 
  2663 ;;  msb             1    7[COMMON] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  2    3[COMMON] int 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 300/0
  2670 ;;		On exit  : 300/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2673 ;;      Params:         2       0       0       0       0
  2674 ;;      Locals:         2       0       0       0       0
  2675 ;;      Temps:          2       0       0       0       0
  2676 ;;      Totals:         6       0       0       0       0
  2677 ;;Total ram usage:        6 bytes
  2678 ;; Hardware stack levels used: 1
  2679 ;; Hardware stack levels required when called: 2
  2680 ;; This function calls:
  2681 ;;		_SPI_Rx_byte
  2682 ;;		i1_SPI_Tx_Byte
  2683 ;;		i1_TC72_Write
  2684 ;; This function is called by:
  2685 ;;		_ISR
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689     031C                     _TC72_Read:	
  2690                           ;psect for function _TC72_Read
  2691                           
  2692                           
  2693                           ;TC72.c: 39:     TC72_Write(0x80, 0x15);
  2694                           
  2695                           ;incstack = 0
  2696                           ; Regs used in _TC72_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2697     031C  3015               	movlw	21
  2698     031D  00F1               	movwf	i1TC72_Write@value
  2699     031E  3080               	movlw	128
  2700     031F  120A  118A  242D  120A  118A  	fcall	i1_TC72_Write
  2701                           
  2702                           ;TC72.c: 41:     RD0 = 1;
  2703     0324  1408               	bsf	8,0	;volatile
  2704                           
  2705                           ;TC72.c: 42:     SPI_Tx_Byte(0x02);
  2706     0325  3002               	movlw	2
  2707     0326  120A  118A  2447  120A  118A  	fcall	i1_SPI_Tx_Byte
  2708                           
  2709                           ;TC72.c: 43:     uint8_t msb = SPI_Rx_byte();
  2710     032B  120A  118A  248A  120A  118A  	fcall	_SPI_Rx_byte
  2711     0330  00F7               	movwf	TC72_Read@msb
  2712                           
  2713                           ;TC72.c: 44:     uint8_t lsb = SPI_Rx_byte();
  2714     0331  120A  118A  248A   	fcall	_SPI_Rx_byte
  2715     0334  00F8               	movwf	TC72_Read@lsb
  2716                           
  2717                           ;TC72.c: 46:     RD0 = 0;
  2718     0335  1008               	bcf	8,0	;volatile
  2719                           
  2720                           ;TC72.c: 47:     return (msb << 8) + lsb;
  2721     0336  0877               	movf	TC72_Read@msb,w
  2722     0337  00F5               	movwf	??_TC72_Read
  2723     0338  01F6               	clrf	??_TC72_Read+1
  2724     0339  0875               	movf	??_TC72_Read,w
  2725     033A  00F6               	movwf	??_TC72_Read+1
  2726     033B  01F5               	clrf	??_TC72_Read
  2727     033C  0878               	movf	TC72_Read@lsb,w
  2728     033D  0775               	addwf	??_TC72_Read,w
  2729     033E  00F3               	movwf	?_TC72_Read
  2730     033F  3000               	movlw	0
  2731     0340  1803               	skipnc
  2732     0341  3001               	movlw	1
  2733     0342  0776               	addwf	??_TC72_Read+1,w
  2734     0343  00F4               	movwf	?_TC72_Read+1
  2735     0344  0008               	return
  2736     0345                     __end_of_TC72_Read:
  2737                           
  2738                           	psect	text17
  2739     042D                     __ptext17:	
  2740 ;; *************** function i1_TC72_Write *****************
  2741 ;; Defined at:
  2742 ;;		line 9 in file "TC72.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  address         1    wreg     unsigned char 
  2745 ;;  value           1    1[COMMON] unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  address         1    2[COMMON] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0, pclath, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 300/0
  2754 ;;		On exit  : 300/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2757 ;;      Params:         1       0       0       0       0
  2758 ;;      Locals:         1       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0
  2760 ;;      Totals:         2       0       0       0       0
  2761 ;;Total ram usage:        2 bytes
  2762 ;; Hardware stack levels used: 1
  2763 ;; Hardware stack levels required when called: 1
  2764 ;; This function calls:
  2765 ;;		i1_SPI_Tx_Byte
  2766 ;; This function is called by:
  2767 ;;		_TC72_Read
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771     042D                     i1_TC72_Write:	
  2772                           ;psect for function i1_TC72_Write
  2773                           
  2774                           
  2775                           ;incstack = 0
  2776                           ; Regs used in i1_TC72_Write: [wreg+status,2+status,0+pclath+cstack]
  2777                           ;i1TC72_Write@address stored from wreg
  2778     042D  00F2               	movwf	i1TC72_Write@address
  2779                           
  2780                           ;TC72.c: 9: void TC72_Write(uint8_t address, uint8_t value);TC72.c: 10: {;TC72.c: 12:   
      +                            RD0 = 1;
  2781     042E  1408               	bsf	8,0	;volatile
  2782                           
  2783                           ;TC72.c: 14:     SPI_Tx_Byte(address);
  2784     042F  0872               	movf	i1TC72_Write@address,w
  2785     0430  120A  118A  2447  120A  118A  	fcall	i1_SPI_Tx_Byte
  2786                           
  2787                           ;TC72.c: 16:     SPI_Tx_Byte(value);
  2788     0435  0871               	movf	i1TC72_Write@value,w
  2789     0436  120A  118A  2447   	fcall	i1_SPI_Tx_Byte
  2790                           
  2791                           ;TC72.c: 18:     RD0 = 0;
  2792     0439  1008               	bcf	8,0	;volatile
  2793     043A  0008               	return
  2794     043B                     __end_ofi1_TC72_Write:
  2795                           
  2796                           	psect	text18
  2797     0447                     __ptext18:	
  2798 ;; *************** function i1_SPI_Tx_Byte *****************
  2799 ;; Defined at:
  2800 ;;		line 80 in file "PIC16F877A_SPI.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  data            1    wreg     unsigned char 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  data            1    0[COMMON] unsigned char 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg
  2809 ;; Tracked objects:
  2810 ;;		On entry : 300/0
  2811 ;;		On exit  : 300/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2814 ;;      Params:         0       0       0       0       0
  2815 ;;      Locals:         1       0       0       0       0
  2816 ;;      Temps:          0       0       0       0       0
  2817 ;;      Totals:         1       0       0       0       0
  2818 ;;Total ram usage:        1 bytes
  2819 ;; Hardware stack levels used: 1
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_TC72_Read
  2824 ;;		i1_TC72_Write
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828     0447                     i1_SPI_Tx_Byte:	
  2829                           ;psect for function i1_SPI_Tx_Byte
  2830                           
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in i1_SPI_Tx_Byte: [wreg]
  2834                           ;i1SPI_Tx_Byte@data stored from wreg
  2835     0447  00F0               	movwf	i1SPI_Tx_Byte@data
  2836                           
  2837                           ;PIC16F877A_SPI.c: 80: void SPI_Tx_Byte(uint8_t data);PIC16F877A_SPI.c: 81: {;PIC16F877A
      +                          _SPI.c: 82:     SSPBUF = data;
  2838     0448  0870               	movf	i1SPI_Tx_Byte@data,w
  2839     0449  0093               	movwf	19	;volatile
  2840     044A                     i1l241:	
  2841                           ;PIC16F877A_SPI.c: 83:     while(!SSPSTATbits.BF);
  2842                           
  2843     044A  1683               	bsf	3,5	;RP0=1, select bank1
  2844     044B  1C14               	btfss	20,0	;volatile
  2845     044C  2C4A               	goto	i1l241
  2846                           
  2847                           ;PIC16F877A_SPI.c: 85:     if(WCOL)
  2848     044D  1283               	bcf	3,5	;RP0=0, select bank0
  2849     044E  1F94               	btfss	20,7	;volatile
  2850     044F  0008               	return
  2851                           
  2852                           ;PIC16F877A_SPI.c: 86:         WCOL = 0;
  2853     0450  1394               	bcf	20,7	;volatile
  2854     0451  0008               	return
  2855     0452                     __end_ofi1_SPI_Tx_Byte:
  2856                           
  2857                           	psect	text19
  2858     048A                     __ptext19:	
  2859 ;; *************** function _SPI_Rx_byte *****************
  2860 ;; Defined at:
  2861 ;;		line 120 in file "PIC16F877A_SPI.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      unsigned char 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2
  2870 ;; Tracked objects:
  2871 ;;		On entry : 300/0
  2872 ;;		On exit  : 300/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2875 ;;      Params:         0       0       0       0       0
  2876 ;;      Locals:         0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0
  2878 ;;      Totals:         0       0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used: 1
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_TC72_Read
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888     048A                     _SPI_Rx_byte:	
  2889                           ;psect for function _SPI_Rx_byte
  2890                           
  2891                           
  2892                           ;PIC16F877A_SPI.c: 122:     SSPBUF = 0;
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _SPI_Rx_byte: [wreg+status,2]
  2896     048A  0193               	clrf	19	;volatile
  2897     048B                     i1l262:	
  2898                           ;PIC16F877A_SPI.c: 123:     while(!SSPSTATbits.BF);
  2899                           
  2900     048B  1683               	bsf	3,5	;RP0=1, select bank1
  2901     048C  1C14               	btfss	20,0	;volatile
  2902     048D  2C8B               	goto	i1l262
  2903                           
  2904                           ;PIC16F877A_SPI.c: 124:     return SSPBUF;
  2905     048E  1283               	bcf	3,5	;RP0=0, select bank0
  2906     048F  0813               	movf	19,w	;volatile
  2907     0490  0008               	return
  2908     0491                     __end_of_SPI_Rx_byte:
  2909                           
  2910                           	psect	text20
  2911     0293                     __ptext20:	
  2912 ;; *************** function _Slave_SendData *****************
  2913 ;; Defined at:
  2914 ;;		line 14 in file "Slave_ModbusRTU.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  temp            2    0[BANK0 ] int 
  2917 ;;  humid_frq       2    2[BANK0 ] unsigned int 
  2918 ;;  function        1    4[BANK0 ] unsigned char 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  CRC             2    9[BANK0 ] unsigned int 
  2921 ;;  humidH          1    8[BANK0 ] unsigned char 
  2922 ;;  humidL          1    7[BANK0 ] unsigned char 
  2923 ;;  tempH           1    6[BANK0 ] unsigned char 
  2924 ;;  tempL           1    5[BANK0 ] unsigned char 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : B00/0
  2931 ;;		On exit  : B00/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2934 ;;      Params:         0       5       0       0       0
  2935 ;;      Locals:         0       6       0       0       0
  2936 ;;      Temps:          0       0       0       0       0
  2937 ;;      Totals:         0      11       0       0       0
  2938 ;;Total ram usage:       11 bytes
  2939 ;; Hardware stack levels used: 1
  2940 ;; Hardware stack levels required when called: 2
  2941 ;; This function calls:
  2942 ;;		_CRCcheck
  2943 ;;		_UARTsendString
  2944 ;; This function is called by:
  2945 ;;		_ISR
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949     0293                     _Slave_SendData:	
  2950                           ;psect for function _Slave_SendData
  2951                           
  2952                           
  2953                           ;Slave_ModbusRTU.c: 16:     uint8_t tempL = temp & 0xFF;
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in _Slave_SendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2957     0293  084B               	movf	Slave_SendData@temp,w
  2958     0294  00D0               	movwf	Slave_SendData@tempL
  2959                           
  2960                           ;Slave_ModbusRTU.c: 17:     uint8_t tempH = (temp >> 8) & 0xFF;
  2961     0295  084C               	movf	Slave_SendData@temp+1,w
  2962     0296  00D1               	movwf	Slave_SendData@tempH
  2963                           
  2964                           ;Slave_ModbusRTU.c: 18:     uint8_t humidL = humid_frq & 0xFF;
  2965     0297  084D               	movf	Slave_SendData@humid_frq,w
  2966     0298  00D2               	movwf	Slave_SendData@humidL
  2967                           
  2968                           ;Slave_ModbusRTU.c: 19:     uint8_t humidH = (humid_frq >> 8) & 0xFF;
  2969     0299  084E               	movf	Slave_SendData@humid_frq+1,w
  2970     029A  00D3               	movwf	Slave_SendData@humidH
  2971                           
  2972                           ;Slave_ModbusRTU.c: 21:     if(function == (uint8_t)0x33){
  2973     029B  3033               	movlw	51
  2974     029C  064F               	xorwf	Slave_SendData@function,w
  2975     029D  1D03               	btfss	3,2
  2976     029E  0008               	return
  2977                           
  2978                           ;Slave_ModbusRTU.c: 23:         ModbusFrame[0] = (uint8_t)0x31;
  2979     029F  3031               	movlw	49
  2980     02A0  00C2               	movwf	_ModbusFrame
  2981                           
  2982                           ;Slave_ModbusRTU.c: 24:         ModbusFrame[1] = function;
  2983     02A1  084F               	movf	Slave_SendData@function,w
  2984     02A2  00C3               	movwf	_ModbusFrame+1
  2985                           
  2986                           ;Slave_ModbusRTU.c: 25:         ModbusFrame[2] = tempL;
  2987     02A3  0850               	movf	Slave_SendData@tempL,w
  2988     02A4  00C4               	movwf	_ModbusFrame+2
  2989                           
  2990                           ;Slave_ModbusRTU.c: 26:         ModbusFrame[3] = tempH;
  2991     02A5  0851               	movf	Slave_SendData@tempH,w
  2992     02A6  00C5               	movwf	_ModbusFrame+3
  2993                           
  2994                           ;Slave_ModbusRTU.c: 27:         ModbusFrame[4] = humidL;
  2995     02A7  0852               	movf	Slave_SendData@humidL,w
  2996     02A8  00C6               	movwf	_ModbusFrame+4
  2997                           
  2998                           ;Slave_ModbusRTU.c: 28:         ModbusFrame[5] = humidH;
  2999     02A9  0853               	movf	Slave_SendData@humidH,w
  3000     02AA  00C7               	movwf	_ModbusFrame+5
  3001                           
  3002                           ;Slave_ModbusRTU.c: 29:         uint16_t CRC = CRCcheck(ModbusFrame, 4 + 2);
  3003     02AB  3006               	movlw	6
  3004     02AC  00F0               	movwf	CRCcheck@len
  3005     02AD  3042               	movlw	(low (_ModbusFrame| 0))& (0+255)
  3006     02AE  120A  118A  21CF  120A  118A  	fcall	_CRCcheck
  3007     02B3  0871               	movf	?_CRCcheck+1,w
  3008     02B4  00D5               	movwf	Slave_SendData@CRC+1
  3009     02B5  0870               	movf	?_CRCcheck,w
  3010     02B6  00D4               	movwf	Slave_SendData@CRC
  3011                           
  3012                           ;Slave_ModbusRTU.c: 30:         ModbusFrame[6] = CRC & 0xFF;
  3013     02B7  0854               	movf	Slave_SendData@CRC,w
  3014     02B8  00C8               	movwf	_ModbusFrame+6
  3015                           
  3016                           ;Slave_ModbusRTU.c: 31:         ModbusFrame[7] = (CRC >> 8) & 0xFF;
  3017     02B9  0855               	movf	Slave_SendData@CRC+1,w
  3018     02BA  00C9               	movwf	_ModbusFrame+7
  3019                           
  3020                           ;Slave_ModbusRTU.c: 32:         ModbusFrame[8] = '\0';
  3021     02BB  01CA               	clrf	_ModbusFrame+8
  3022                           
  3023                           ;Slave_ModbusRTU.c: 34:         UARTsendString((char*)ModbusFrame);
  3024     02BC  3042               	movlw	(low (_ModbusFrame| 0))& (0+255)
  3025     02BD  120A  118A  23A9   	fcall	_UARTsendString
  3026                           
  3027                           ;Slave_ModbusRTU.c: 35:         send = 1;
  3028     02C0  1461               	bsf	_send/(0+8),_send& (0+7)
  3029     02C1  0008               	return
  3030     02C2                     __end_of_Slave_SendData:
  3031                           
  3032                           	psect	text21
  3033     02C2                     __ptext21:	
  3034 ;; *************** function _Slave_DataHandling *****************
  3035 ;; Defined at:
  3036 ;;		line 103 in file "Slave_ModbusRTU.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  buf             1    wreg     PTR unsigned char 
  3039 ;;		 -> rcv_buffer(9), 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  buf             1    9[BANK0 ] PTR unsigned char 
  3042 ;;		 -> rcv_buffer(9), 
  3043 ;;  eframe          2    7[BANK0 ] struct ErrorFrame
  3044 ;; Return value:  Size  Location     Type
  3045 ;;		None               void
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : B00/0
  3050 ;;		On exit  : B00/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3053 ;;      Params:         0       0       0       0       0
  3054 ;;      Locals:         0       3       0       0       0
  3055 ;;      Temps:          0       0       0       0       0
  3056 ;;      Totals:         0       3       0       0       0
  3057 ;;Total ram usage:        3 bytes
  3058 ;; Hardware stack levels used: 1
  3059 ;; Hardware stack levels required when called: 3
  3060 ;; This function calls:
  3061 ;;		_ReceiveData_Check
  3062 ;;		_SendErrorFrame
  3063 ;; This function is called by:
  3064 ;;		_ISR
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068     02C2                     _Slave_DataHandling:	
  3069                           ;psect for function _Slave_DataHandling
  3070                           
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _Slave_DataHandling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3074                           ;Slave_DataHandling@buf stored from wreg
  3075     02C2  00D4               	movwf	Slave_DataHandling@buf
  3076                           
  3077                           ;Slave_ModbusRTU.c: 103: __bit Slave_DataHandling(uint8_t *buf);Slave_ModbusRTU.c: 104: 
      +                          {;Slave_ModbusRTU.c: 106:     if(buf[0] != 0x31){
  3078     02C3  0854               	movf	Slave_DataHandling@buf,w
  3079     02C4  0084               	movwf	4
  3080     02C5  3031               	movlw	49
  3081     02C6  0600               	xorwf	0,w
  3082     02C7  1D03               	btfss	3,2
  3083     02C8  2ACB               	goto	i1l2045
  3084     02C9  2ACD               	goto	i1l2049
  3085     02CA                     i1l2051:
  3086                           
  3087                           ;Slave_ModbusRTU.c: 111:         RB1 = 1;
  3088     02CA  1486               	bsf	6,1	;volatile
  3089     02CB                     i1l2045:
  3090                           
  3091                           ;Slave_ModbusRTU.c: 107:         return 0;
  3092     02CB  1003               	clrc
  3093     02CC  0008               	return
  3094     02CD                     i1l2049:
  3095                           
  3096                           ;Slave_ModbusRTU.c: 110:     if((buf[1] & 0x80) == 0x80){
  3097     02CD  0A54               	incf	Slave_DataHandling@buf,w
  3098     02CE  0084               	movwf	4
  3099     02CF  1B80               	btfsc	0,7
  3100     02D0  2ACA               	goto	i1l2051
  3101                           
  3102                           ;Slave_ModbusRTU.c: 115:     ErrorFrame eframe = ReceiveData_Check(buf);
  3103     02D1  0854               	movf	Slave_DataHandling@buf,w
  3104     02D2  120A  118A  2261  120A  118A  	fcall	_ReceiveData_Check
  3105     02D7  087D               	movf	?_ReceiveData_Check+1,w
  3106     02D8  00D3               	movwf	Slave_DataHandling@eframe+1
  3107     02D9  087C               	movf	?_ReceiveData_Check,w
  3108     02DA  00D2               	movwf	Slave_DataHandling@eframe
  3109                           
  3110                           ;Slave_ModbusRTU.c: 117:     if(eframe.Function_error == 0x01 || eframe.CRC_error == 0x0
      +                          1){
  3111     02DB  0352               	decf	Slave_DataHandling@eframe,w
  3112     02DC  1D03               	btfss	3,2
  3113     02DD  0353               	decf	Slave_DataHandling@eframe+1,w
  3114     02DE  1D03               	btfss	3,2
  3115     02DF  2AEE               	goto	i1l2069
  3116                           
  3117                           ;Slave_ModbusRTU.c: 119:         SendErrorFrame(eframe, buf[1]);
  3118     02E0  0853               	movf	Slave_DataHandling@eframe+1,w
  3119     02E1  00CC               	movwf	SendErrorFrame@Eframe+1
  3120     02E2  0852               	movf	Slave_DataHandling@eframe,w
  3121     02E3  00CB               	movwf	SendErrorFrame@Eframe
  3122     02E4  0A54               	incf	Slave_DataHandling@buf,w
  3123     02E5  0084               	movwf	4
  3124     02E6  0800               	movf	0,w
  3125     02E7  00CD               	movwf	SendErrorFrame@function
  3126     02E8  120A  118A  2345  120A  118A  	fcall	_SendErrorFrame
  3127     02ED  2ACB               	goto	i1l2045
  3128     02EE                     i1l2069:
  3129                           
  3130                           ;Slave_ModbusRTU.c: 123:     return 1;
  3131     02EE  1403               	setc
  3132     02EF  0008               	return
  3133     02F0                     __end_of_Slave_DataHandling:
  3134                           
  3135                           	psect	text22
  3136     0345                     __ptext22:	
  3137 ;; *************** function _SendErrorFrame *****************
  3138 ;; Defined at:
  3139 ;;		line 83 in file "Slave_ModbusRTU.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  Eframe          2    0[BANK0 ] struct ErrorFrame
  3142 ;;  function        1    2[BANK0 ] unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  CRC             2   12[COMMON] unsigned int 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : B00/0
  3151 ;;		On exit  : B00/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3154 ;;      Params:         0       3       0       0       0
  3155 ;;      Locals:         2       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0
  3157 ;;      Totals:         2       3       0       0       0
  3158 ;;Total ram usage:        5 bytes
  3159 ;; Hardware stack levels used: 1
  3160 ;; Hardware stack levels required when called: 2
  3161 ;; This function calls:
  3162 ;;		_CRCcheck
  3163 ;;		_UARTsendString
  3164 ;; This function is called by:
  3165 ;;		_Slave_DataHandling
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169     0345                     _SendErrorFrame:	
  3170                           ;psect for function _SendErrorFrame
  3171                           
  3172                           
  3173                           ;Slave_ModbusRTU.c: 84:     if(send == 0){
  3174                           
  3175                           ;incstack = 0
  3176                           ; Regs used in _SendErrorFrame: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3177     0345  1861               	btfsc	_send/(0+8),_send& (0+7)
  3178     0346  0008               	return
  3179                           
  3180                           ;Slave_ModbusRTU.c: 86:         ModbusFrame[0] = (uint8_t)0x31;
  3181     0347  3031               	movlw	49
  3182     0348  00C2               	movwf	_ModbusFrame
  3183                           
  3184                           ;Slave_ModbusRTU.c: 87:         ModbusFrame[1] = function | 0x80;
  3185     0349  084D               	movf	SendErrorFrame@function,w
  3186     034A  3880               	iorlw	128
  3187     034B  00C3               	movwf	_ModbusFrame+1
  3188                           
  3189                           ;Slave_ModbusRTU.c: 88:         ModbusFrame[2] = 0x00;
  3190     034C  01C4               	clrf	_ModbusFrame+2
  3191                           
  3192                           ;Slave_ModbusRTU.c: 89:         ModbusFrame[3] = Eframe.Function_error;
  3193     034D  084B               	movf	SendErrorFrame@Eframe,w
  3194     034E  00C5               	movwf	_ModbusFrame+3
  3195                           
  3196                           ;Slave_ModbusRTU.c: 90:         ModbusFrame[4] = Eframe.CRC_error;
  3197     034F  084C               	movf	SendErrorFrame@Eframe+1,w
  3198     0350  00C6               	movwf	_ModbusFrame+4
  3199                           
  3200                           ;Slave_ModbusRTU.c: 91:         ModbusFrame[5] = 0x00;
  3201     0351  01C7               	clrf	_ModbusFrame+5
  3202                           
  3203                           ;Slave_ModbusRTU.c: 92:         uint16_t CRC = CRCcheck(ModbusFrame,4 + 2);
  3204     0352  3006               	movlw	6
  3205     0353  00F0               	movwf	CRCcheck@len
  3206     0354  3042               	movlw	(low (_ModbusFrame| 0))& (0+255)
  3207     0355  120A  118A  21CF  120A  118A  	fcall	_CRCcheck
  3208     035A  0871               	movf	?_CRCcheck+1,w
  3209     035B  00FD               	movwf	SendErrorFrame@CRC+1
  3210     035C  0870               	movf	?_CRCcheck,w
  3211     035D  00FC               	movwf	SendErrorFrame@CRC
  3212                           
  3213                           ;Slave_ModbusRTU.c: 93:         ModbusFrame[6] = CRC & 0xFF;
  3214     035E  087C               	movf	SendErrorFrame@CRC,w
  3215     035F  00C8               	movwf	_ModbusFrame+6
  3216                           
  3217                           ;Slave_ModbusRTU.c: 94:         ModbusFrame[7] = CRC >> 8;
  3218     0360  087D               	movf	SendErrorFrame@CRC+1,w
  3219     0361  00C9               	movwf	_ModbusFrame+7
  3220                           
  3221                           ;Slave_ModbusRTU.c: 95:         ModbusFrame[8] = '\0';
  3222     0362  01CA               	clrf	_ModbusFrame+8
  3223                           
  3224                           ;Slave_ModbusRTU.c: 97:         UARTsendString((char*)ModbusFrame);
  3225     0363  3042               	movlw	(low (_ModbusFrame| 0))& (0+255)
  3226     0364  120A  118A  23A9   	fcall	_UARTsendString
  3227                           
  3228                           ;Slave_ModbusRTU.c: 98:         send = 1;
  3229     0367  1461               	bsf	_send/(0+8),_send& (0+7)
  3230     0368  0008               	return
  3231     0369                     __end_of_SendErrorFrame:
  3232                           
  3233                           	psect	text23
  3234     03A9                     __ptext23:	
  3235 ;; *************** function _UARTsendString *****************
  3236 ;; Defined at:
  3237 ;;		line 81 in file "PIC16F877A_UART.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  str             1    wreg     PTR unsigned char 
  3240 ;;		 -> ModbusFrame(9), 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  str             1    4[COMMON] PTR unsigned char 
  3243 ;;		 -> ModbusFrame(9), 
  3244 ;;  i               2    2[COMMON] int 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : B00/0
  3251 ;;		On exit  : B00/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3254 ;;      Params:         0       0       0       0       0
  3255 ;;      Locals:         3       0       0       0       0
  3256 ;;      Temps:          1       0       0       0       0
  3257 ;;      Totals:         4       0       0       0       0
  3258 ;;Total ram usage:        4 bytes
  3259 ;; Hardware stack levels used: 1
  3260 ;; Hardware stack levels required when called: 1
  3261 ;; This function calls:
  3262 ;;		_UARTsendChar
  3263 ;; This function is called by:
  3264 ;;		_Slave_SendData
  3265 ;;		_SendErrorFrame
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269     03A9                     _UARTsendString:	
  3270                           ;psect for function _UARTsendString
  3271                           
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _UARTsendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3275                           ;UARTsendString@str stored from wreg
  3276     03A9  00F4               	movwf	UARTsendString@str
  3277                           
  3278                           ;PIC16F877A_UART.c: 81: void UARTsendString(char *str);PIC16F877A_UART.c: 82: {;PIC16F87
      +                          7A_UART.c: 83:     for (int i = 0; str[i] != '\0'; ++i)
  3279     03AA  01F2               	clrf	UARTsendString@i
  3280     03AB  01F3               	clrf	UARTsendString@i+1
  3281     03AC                     i1l1787:
  3282     03AC  0872               	movf	UARTsendString@i,w
  3283     03AD  0774               	addwf	UARTsendString@str,w
  3284     03AE  00F1               	movwf	??_UARTsendString
  3285     03AF  0871               	movf	??_UARTsendString,w
  3286     03B0  0084               	movwf	4
  3287     03B1  0800               	movf	0,w
  3288     03B2  1903               	btfsc	3,2
  3289     03B3  0008               	return
  3290                           
  3291                           ;PIC16F877A_UART.c: 84:         UARTsendChar(str[i]);
  3292     03B4  0872               	movf	UARTsendString@i,w
  3293     03B5  0774               	addwf	UARTsendString@str,w
  3294     03B6  00F1               	movwf	??_UARTsendString
  3295     03B7  0871               	movf	??_UARTsendString,w
  3296     03B8  0084               	movwf	4
  3297     03B9  0800               	movf	0,w
  3298     03BA  120A  118A  2482  120A  118A  	fcall	_UARTsendChar
  3299     03BF  3001               	movlw	1
  3300     03C0  07F2               	addwf	UARTsendString@i,f
  3301     03C1  1803               	skipnc
  3302     03C2  0AF3               	incf	UARTsendString@i+1,f
  3303     03C3  3000               	movlw	0
  3304     03C4  07F3               	addwf	UARTsendString@i+1,f
  3305     03C5  2BAC               	goto	i1l1787
  3306     03C6                     __end_of_UARTsendString:
  3307                           
  3308                           	psect	text24
  3309     0482                     __ptext24:	
  3310 ;; *************** function _UARTsendChar *****************
  3311 ;; Defined at:
  3312 ;;		line 73 in file "PIC16F877A_UART.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  c               1    wreg     unsigned char 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  c               1    0[COMMON] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg
  3321 ;; Tracked objects:
  3322 ;;		On entry : B00/0
  3323 ;;		On exit  : B00/0
  3324 ;;		Unchanged: 800/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         1       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0
  3329 ;;      Totals:         1       0       0       0       0
  3330 ;;Total ram usage:        1 bytes
  3331 ;; Hardware stack levels used: 1
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_UARTsendString
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339     0482                     _UARTsendChar:	
  3340                           ;psect for function _UARTsendChar
  3341                           
  3342                           
  3343                           ;incstack = 0
  3344                           ; Regs used in _UARTsendChar: [wreg]
  3345                           ;UARTsendChar@c stored from wreg
  3346     0482  00F0               	movwf	UARTsendChar@c
  3347     0483                     i1l313:	
  3348                           ;PIC16F877A_UART.c: 73: void UARTsendChar(char c);PIC16F877A_UART.c: 74: {;PIC16F877A_UA
      +                          RT.c: 76:     while (! TRMT);
  3349                           
  3350     0483  1683               	bsf	3,5	;RP0=1, select bank1
  3351     0484  1C98               	btfss	24,1	;volatile
  3352     0485  2C83               	goto	i1l313
  3353                           
  3354                           ;PIC16F877A_UART.c: 77:     TXREG = c;
  3355     0486  0870               	movf	UARTsendChar@c,w
  3356     0487  1283               	bcf	3,5	;RP0=0, select bank0
  3357     0488  0099               	movwf	25	;volatile
  3358     0489  0008               	return
  3359     048A                     __end_of_UARTsendChar:
  3360                           
  3361                           	psect	text25
  3362     0261                     __ptext25:	
  3363 ;; *************** function _ReceiveData_Check *****************
  3364 ;; Defined at:
  3365 ;;		line 61 in file "Slave_ModbusRTU.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  str             1    wreg     PTR unsigned char 
  3368 ;;		 -> rcv_buffer(9), 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  str             1    6[BANK0 ] PTR unsigned char 
  3371 ;;		 -> rcv_buffer(9), 
  3372 ;;  eframe          2    4[BANK0 ] struct ErrorFrame
  3373 ;;  CRC             2    2[BANK0 ] unsigned int 
  3374 ;;  CRCH            1    1[BANK0 ] unsigned char 
  3375 ;;  CRCL            1    0[BANK0 ] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  2   12[COMMON] struct ErrorFrame
  3378 ;; Registers used:
  3379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : B00/0
  3382 ;;		On exit  : B00/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3385 ;;      Params:         2       0       0       0       0
  3386 ;;      Locals:         0       7       0       0       0
  3387 ;;      Temps:          0       0       0       0       0
  3388 ;;      Totals:         2       7       0       0       0
  3389 ;;Total ram usage:        9 bytes
  3390 ;; Hardware stack levels used: 1
  3391 ;; Hardware stack levels required when called: 1
  3392 ;; This function calls:
  3393 ;;		_CRCcheck
  3394 ;; This function is called by:
  3395 ;;		_Slave_DataHandling
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399     0261                     _ReceiveData_Check:	
  3400                           ;psect for function _ReceiveData_Check
  3401                           
  3402                           
  3403                           ;incstack = 0
  3404                           ; Regs used in _ReceiveData_Check: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3405                           ;ReceiveData_Check@str stored from wreg
  3406     0261  00D1               	movwf	ReceiveData_Check@str
  3407                           
  3408                           ;Slave_ModbusRTU.c: 61: ErrorFrame ReceiveData_Check(uint8_t *str);Slave_ModbusRTU.c: 62
      +                          : {;Slave_ModbusRTU.c: 63:     ErrorFrame eframe;;Slave_ModbusRTU.c: 65:     if(str[1] !
      +                          = (uint8_t)0x33){
  3409     0262  0A51               	incf	ReceiveData_Check@str,w
  3410     0263  0084               	movwf	4
  3411     0264  3033               	movlw	51
  3412     0265  0600               	xorwf	0,w
  3413     0266  1903               	btfsc	3,2
  3414     0267  2A6B               	goto	i1l1881
  3415                           
  3416                           ;Slave_ModbusRTU.c: 66:         eframe.Function_error = 1;
  3417     0268  01CF               	clrf	ReceiveData_Check@eframe
  3418     0269  0ACF               	incf	ReceiveData_Check@eframe,f
  3419                           
  3420                           ;Slave_ModbusRTU.c: 67:     }else{
  3421     026A  2A6C               	goto	i1l1883
  3422     026B                     i1l1881:
  3423                           
  3424                           ;Slave_ModbusRTU.c: 68:         eframe.Function_error = 0;
  3425     026B  01CF               	clrf	ReceiveData_Check@eframe
  3426     026C                     i1l1883:
  3427                           
  3428                           ;Slave_ModbusRTU.c: 71:     uint16_t CRC = CRCcheck(str, 4 + 2);
  3429     026C  3006               	movlw	6
  3430     026D  00F0               	movwf	CRCcheck@len
  3431     026E  0851               	movf	ReceiveData_Check@str,w
  3432     026F  120A  118A  21CF  120A  118A  	fcall	_CRCcheck
  3433     0274  0871               	movf	?_CRCcheck+1,w
  3434     0275  00CE               	movwf	ReceiveData_Check@CRC+1
  3435     0276  0870               	movf	?_CRCcheck,w
  3436     0277  00CD               	movwf	ReceiveData_Check@CRC
  3437                           
  3438                           ;Slave_ModbusRTU.c: 72:     uint8_t CRCL = CRC & 0xFF;
  3439     0278  084D               	movf	ReceiveData_Check@CRC,w
  3440     0279  00CB               	movwf	ReceiveData_Check@CRCL
  3441                           
  3442                           ;Slave_ModbusRTU.c: 73:     uint8_t CRCH = CRC >> 8;
  3443     027A  084E               	movf	ReceiveData_Check@CRC+1,w
  3444     027B  00CC               	movwf	ReceiveData_Check@CRCH
  3445                           
  3446                           ;Slave_ModbusRTU.c: 74:     if(str[6] != CRCL || str[7] != CRCH){
  3447     027C  0851               	movf	ReceiveData_Check@str,w
  3448     027D  3E06               	addlw	6
  3449     027E  0084               	movwf	4
  3450     027F  0800               	movf	0,w
  3451     0280  064B               	xorwf	ReceiveData_Check@CRCL,w
  3452     0281  1D03               	skipz
  3453     0282  2A8A               	goto	i1l158
  3454     0283  0851               	movf	ReceiveData_Check@str,w
  3455     0284  3E07               	addlw	7
  3456     0285  0084               	movwf	4
  3457     0286  0800               	movf	0,w
  3458     0287  064C               	xorwf	ReceiveData_Check@CRCH,w
  3459     0288  1903               	skipnz
  3460     0289  2A8D               	goto	i1l1893
  3461     028A                     i1l158:
  3462                           
  3463                           ;Slave_ModbusRTU.c: 75:         eframe.CRC_error = 1;
  3464     028A  01D0               	clrf	ReceiveData_Check@eframe+1
  3465     028B  0AD0               	incf	ReceiveData_Check@eframe+1,f
  3466                           
  3467                           ;Slave_ModbusRTU.c: 76:     }else{
  3468     028C  2A8E               	goto	i1l1895
  3469     028D                     i1l1893:
  3470                           
  3471                           ;Slave_ModbusRTU.c: 77:         eframe.CRC_error = 0;
  3472     028D  01D0               	clrf	ReceiveData_Check@eframe+1
  3473     028E                     i1l1895:
  3474                           
  3475                           ;Slave_ModbusRTU.c: 79:     return eframe;
  3476     028E  0850               	movf	ReceiveData_Check@eframe+1,w
  3477     028F  00FD               	movwf	?_ReceiveData_Check+1
  3478     0290  084F               	movf	ReceiveData_Check@eframe,w
  3479     0291  00FC               	movwf	?_ReceiveData_Check
  3480     0292  0008               	return
  3481     0293                     __end_of_ReceiveData_Check:
  3482                           
  3483                           	psect	text26
  3484     01CF                     __ptext26:	
  3485 ;; *************** function _CRCcheck *****************
  3486 ;; Defined at:
  3487 ;;		line 40 in file "Slave_ModbusRTU.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  buf             1    wreg     PTR unsigned char 
  3490 ;;		 -> ModbusFrame(9), rcv_buffer(9), 
  3491 ;;  len             1    0[COMMON] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  buf             1    5[COMMON] PTR unsigned char 
  3494 ;;		 -> ModbusFrame(9), rcv_buffer(9), 
  3495 ;;  index           2    8[COMMON] unsigned int 
  3496 ;;  pos             2    6[COMMON] unsigned int 
  3497 ;;  crc             2   10[COMMON] unsigned int 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  2    0[COMMON] unsigned int 
  3500 ;; Registers used:
  3501 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : B00/0
  3504 ;;		On exit  : B00/0
  3505 ;;		Unchanged: 300/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3507 ;;      Params:         2       0       0       0       0
  3508 ;;      Locals:         7       0       0       0       0
  3509 ;;      Temps:          3       0       0       0       0
  3510 ;;      Totals:        12       0       0       0       0
  3511 ;;Total ram usage:       12 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_Slave_SendData
  3517 ;;		_ReceiveData_Check
  3518 ;;		_SendErrorFrame
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522     01CF                     _CRCcheck:	
  3523                           ;psect for function _CRCcheck
  3524                           
  3525                           
  3526                           ;incstack = 0
  3527                           ; Regs used in _CRCcheck: [wreg-fsr0h+status,2+status,0]
  3528                           ;CRCcheck@buf stored from wreg
  3529     01CF  00F5               	movwf	CRCcheck@buf
  3530                           
  3531                           ;Slave_ModbusRTU.c: 41:     uint16_t crc = 0xFFFF;
  3532     01D0  30FF               	movlw	255
  3533     01D1  00FA               	movwf	CRCcheck@crc
  3534     01D2  30FF               	movlw	255
  3535     01D3  00FB               	movwf	CRCcheck@crc+1
  3536                           
  3537                           ;Slave_ModbusRTU.c: 42:     for (uint16_t pos = 0; pos < len; pos++)
  3538     01D4  01F6               	clrf	CRCcheck@pos
  3539     01D5  01F7               	clrf	CRCcheck@pos+1
  3540     01D6                     i1l144:
  3541     01D6  0870               	movf	CRCcheck@len,w
  3542     01D7  00F2               	movwf	??_CRCcheck
  3543     01D8  01F3               	clrf	??_CRCcheck+1
  3544     01D9  0873               	movf	??_CRCcheck+1,w
  3545     01DA  0277               	subwf	CRCcheck@pos+1,w
  3546     01DB  1D03               	skipz
  3547     01DC  29DF               	goto	u53_25
  3548     01DD  0872               	movf	??_CRCcheck,w
  3549     01DE  0276               	subwf	CRCcheck@pos,w
  3550     01DF                     u53_25:
  3551     01DF  1803               	btfsc	3,0
  3552     01E0  2A17               	goto	i1l1777
  3553                           
  3554                           ;Slave_ModbusRTU.c: 43:     {;Slave_ModbusRTU.c: 44:         crc ^= (unsigned int)buf[po
      +                          s];
  3555     01E1  0876               	movf	CRCcheck@pos,w
  3556     01E2  0775               	addwf	CRCcheck@buf,w
  3557     01E3  00F2               	movwf	??_CRCcheck
  3558     01E4  0872               	movf	??_CRCcheck,w
  3559     01E5  0084               	movwf	4
  3560     01E6  0800               	movf	0,w
  3561     01E7  00F3               	movwf	??_CRCcheck+1
  3562     01E8  01F4               	clrf	??_CRCcheck+2
  3563     01E9  0873               	movf	??_CRCcheck+1,w
  3564     01EA  06FA               	xorwf	CRCcheck@crc,f
  3565     01EB  0874               	movf	??_CRCcheck+2,w
  3566     01EC  06FB               	xorwf	CRCcheck@crc+1,f
  3567                           
  3568                           ;Slave_ModbusRTU.c: 45:         for (uint16_t index = 8; index != 0; index--)
  3569     01ED  3008               	movlw	8
  3570     01EE  00F8               	movwf	CRCcheck@index
  3571     01EF  3000               	movlw	0
  3572     01F0  00F9               	movwf	CRCcheck@index+1
  3573     01F1                     i1l146:
  3574                           
  3575                           ;Slave_ModbusRTU.c: 46:         {;Slave_ModbusRTU.c: 47:             if ((crc & 0x0001) 
      +                          != 0){
  3576     01F1  1C7A               	btfss	CRCcheck@crc,0
  3577     01F2  29FF               	goto	i1l1769
  3578                           
  3579                           ;Slave_ModbusRTU.c: 48:                 crc >>= 1;
  3580     01F3  3001               	movlw	1
  3581     01F4                     u50_25:
  3582     01F4  1003               	clrc
  3583     01F5  0CFB               	rrf	CRCcheck@crc+1,f
  3584     01F6  0CFA               	rrf	CRCcheck@crc,f
  3585     01F7  3EFF               	addlw	-1
  3586     01F8  1D03               	skipz
  3587     01F9  29F4               	goto	u50_25
  3588                           
  3589                           ;Slave_ModbusRTU.c: 49:                 crc ^= 0xA001;
  3590     01FA  3001               	movlw	1
  3591     01FB  06FA               	xorwf	CRCcheck@crc,f
  3592     01FC  30A0               	movlw	160
  3593     01FD  06FB               	xorwf	CRCcheck@crc+1,f
  3594                           
  3595                           ;Slave_ModbusRTU.c: 50:             } else
  3596     01FE  2A06               	goto	i1l1771
  3597     01FF                     i1l1769:
  3598                           
  3599                           ;Slave_ModbusRTU.c: 51:             {;Slave_ModbusRTU.c: 52:                 crc >>= 1;
  3600     01FF  3001               	movlw	1
  3601     0200                     u51_25:
  3602     0200  1003               	clrc
  3603     0201  0CFB               	rrf	CRCcheck@crc+1,f
  3604     0202  0CFA               	rrf	CRCcheck@crc,f
  3605     0203  3EFF               	addlw	-1
  3606     0204  1D03               	skipz
  3607     0205  2A00               	goto	u51_25
  3608     0206                     i1l1771:
  3609                           
  3610                           ;Slave_ModbusRTU.c: 54:         }
  3611     0206  3001               	movlw	1
  3612     0207  02F8               	subwf	CRCcheck@index,f
  3613     0208  3000               	movlw	0
  3614     0209  1C03               	skipc
  3615     020A  03F9               	decf	CRCcheck@index+1,f
  3616     020B  02F9               	subwf	CRCcheck@index+1,f
  3617     020C  0878               	movf	CRCcheck@index,w
  3618     020D  0479               	iorwf	CRCcheck@index+1,w
  3619     020E  1D03               	btfss	3,2
  3620     020F  29F1               	goto	i1l146
  3621                           
  3622                           ;Slave_ModbusRTU.c: 55:     }
  3623     0210  3001               	movlw	1
  3624     0211  07F6               	addwf	CRCcheck@pos,f
  3625     0212  1803               	skipnc
  3626     0213  0AF7               	incf	CRCcheck@pos+1,f
  3627     0214  3000               	movlw	0
  3628     0215  07F7               	addwf	CRCcheck@pos+1,f
  3629     0216  29D6               	goto	i1l144
  3630     0217                     i1l1777:
  3631                           
  3632                           ;Slave_ModbusRTU.c: 57:     return crc;
  3633     0217  087B               	movf	CRCcheck@crc+1,w
  3634     0218  00F1               	movwf	?_CRCcheck+1
  3635     0219  087A               	movf	CRCcheck@crc,w
  3636     021A  00F0               	movwf	?_CRCcheck
  3637     021B  0008               	return
  3638     021C                     __end_of_CRCcheck:
  3639                           
  3640                           	psect	text27
  3641     0491                     __ptext27:	
  3642 ;; *************** function _HCH1000_timer1Ovf *****************
  3643 ;; Defined at:
  3644 ;;		line 38 in file "HCH_1000.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg
  3653 ;; Tracked objects:
  3654 ;;		On entry : 300/0
  3655 ;;		On exit  : 300/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_ISR
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671     0491                     _HCH1000_timer1Ovf:	
  3672                           ;psect for function _HCH1000_timer1Ovf
  3673                           
  3674                           
  3675                           ;HCH_1000.c: 40:     timer1_ovf++;
  3676                           
  3677                           ;incstack = 0
  3678                           ; Regs used in _HCH1000_timer1Ovf: [wreg]
  3679     0491  3001               	movlw	1
  3680     0492  07AE               	addwf	_timer1_ovf,f
  3681     0493  1803               	skipnc
  3682     0494  0AAF               	incf	_timer1_ovf+1,f
  3683     0495  3000               	movlw	0
  3684     0496  07AF               	addwf	_timer1_ovf+1,f
  3685     0497  0008               	return
  3686     0498                     __end_of_HCH1000_timer1Ovf:
  3687                           
  3688                           	psect	text28
  3689     049E                     __ptext28:	
  3690 ;; *************** function _HCH1000_startMeasure *****************
  3691 ;; Defined at:
  3692 ;;		line 50 in file "HCH_1000.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, btemp+1
  3701 ;; Tracked objects:
  3702 ;;		On entry : 300/0
  3703 ;;		On exit  : 300/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3706 ;;      Params:         0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0
  3709 ;;      Totals:         0       0       0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used: 1
  3712 ;; This function calls:
  3713 ;;		Nothing
  3714 ;; This function is called by:
  3715 ;;		_ISR
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719     049E                     _HCH1000_startMeasure:	
  3720                           ;psect for function _HCH1000_startMeasure
  3721                           
  3722                           
  3723                           ;HCH_1000.c: 52:     CCP1CON |= 0b00000101;
  3724                           
  3725                           ;incstack = 0
  3726                           ; Regs used in _HCH1000_startMeasure: [wreg+status,2+status,0+btemp+1]
  3727     049E  3005               	movlw	5
  3728     049F  00FF               	movwf	127
  3729     04A0  087F               	movf	127,w
  3730     04A1  0497               	iorwf	23,f	;volatile
  3731     04A2  0008               	return
  3732     04A3                     __end_of_HCH1000_startMeasure:
  3733                           
  3734                           	psect	text29
  3735     0389                     __ptext29:	
  3736 ;; *************** function _HCH1000_readFreq *****************
  3737 ;; Defined at:
  3738 ;;		line 56 in file "HCH_1000.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      unsigned char 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 300/0
  3749 ;;		On exit  : 300/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3752 ;;      Params:         0       0       0       0       0
  3753 ;;      Locals:         0       0       0       0       0
  3754 ;;      Temps:          0       0       0       0       0
  3755 ;;      Totals:         0       0       0       0       0
  3756 ;;Total ram usage:        0 bytes
  3757 ;; Hardware stack levels used: 1
  3758 ;; Hardware stack levels required when called: 2
  3759 ;; This function calls:
  3760 ;;		_HCH1000_calFreq
  3761 ;;		_HCH1000_stopMeasure
  3762 ;; This function is called by:
  3763 ;;		_ISR
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767     0389                     _HCH1000_readFreq:	
  3768                           ;psect for function _HCH1000_readFreq
  3769                           
  3770                           
  3771                           ;HCH_1000.c: 58:     if(hch1000_state == IDLE)
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _HCH1000_readFreq: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3775     0389  0838               	movf	_hch1000_state,w
  3776     038A  1D03               	btfss	3,2
  3777     038B  2B96               	goto	i1l1999
  3778                           
  3779                           ;HCH_1000.c: 59:     {;HCH_1000.c: 60:         edgeT1 = CCPR1;
  3780     038C  0816               	movf	22,w	;volatile
  3781     038D  00B3               	movwf	_edgeT1+1
  3782     038E  0815               	movf	21,w	;volatile
  3783     038F  00B2               	movwf	_edgeT1
  3784                           
  3785                           ;HCH_1000.c: 61:         timer1_ovf = 0;
  3786     0390  01AE               	clrf	_timer1_ovf
  3787     0391  01AF               	clrf	_timer1_ovf+1
  3788                           
  3789                           ;HCH_1000.c: 62:         hch1000_state = DONE;
  3790     0392  01B8               	clrf	_hch1000_state
  3791     0393  0AB8               	incf	_hch1000_state,f
  3792                           
  3793                           ;HCH_1000.c: 63:         return 0;
  3794     0394  3000               	movlw	0
  3795     0395  0008               	return
  3796     0396                     i1l1999:
  3797                           
  3798                           ;HCH_1000.c: 66:     {;HCH_1000.c: 67:         edgeT2 = CCPR1;
  3799     0396  0816               	movf	22,w	;volatile
  3800     0397  00B1               	movwf	_edgeT2+1
  3801     0398  0815               	movf	21,w	;volatile
  3802     0399  00B0               	movwf	_edgeT2
  3803                           
  3804                           ;HCH_1000.c: 68:         hch1000_freq = HCH1000_calFreq();
  3805     039A  120A  118A  20AF  120A  118A  	fcall	_HCH1000_calFreq
  3806     039F  084C               	movf	?_HCH1000_calFreq+1,w
  3807     03A0  00B5               	movwf	_hch1000_freq+1
  3808     03A1  084B               	movf	?_HCH1000_calFreq,w
  3809     03A2  00B4               	movwf	_hch1000_freq
  3810                           
  3811                           ;HCH_1000.c: 69:         hch1000_state = IDLE;
  3812     03A3  01B8               	clrf	_hch1000_state
  3813                           
  3814                           ;HCH_1000.c: 71:         HCH1000_stopMeasure();
  3815     03A4  120A  118A  24A3   	fcall	_HCH1000_stopMeasure
  3816                           
  3817                           ;HCH_1000.c: 72:         return 1;
  3818     03A7  3001               	movlw	1
  3819     03A8  0008               	return
  3820     03A9                     __end_of_HCH1000_readFreq:
  3821                           
  3822                           	psect	text30
  3823     04A3                     __ptext30:	
  3824 ;; *************** function _HCH1000_stopMeasure *****************
  3825 ;; Defined at:
  3826 ;;		line 14 in file "HCH_1000.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;		None
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      void 
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, btemp+1
  3835 ;; Tracked objects:
  3836 ;;		On entry : 300/0
  3837 ;;		On exit  : 300/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3840 ;;      Params:         0       0       0       0       0
  3841 ;;      Locals:         0       0       0       0       0
  3842 ;;      Temps:          0       0       0       0       0
  3843 ;;      Totals:         0       0       0       0       0
  3844 ;;Total ram usage:        0 bytes
  3845 ;; Hardware stack levels used: 1
  3846 ;; This function calls:
  3847 ;;		Nothing
  3848 ;; This function is called by:
  3849 ;;		_HCH1000_readFreq
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853     04A3                     _HCH1000_stopMeasure:	
  3854                           ;psect for function _HCH1000_stopMeasure
  3855                           
  3856                           
  3857                           ;HCH_1000.c: 16:     CCP1CON &= 0b11110000;
  3858                           
  3859                           ;incstack = 0
  3860                           ; Regs used in _HCH1000_stopMeasure: [wreg+status,2+status,0+btemp+1]
  3861     04A3  30F0               	movlw	240
  3862     04A4  00FF               	movwf	127
  3863     04A5  087F               	movf	127,w
  3864     04A6  0597               	andwf	23,f	;volatile
  3865     04A7  0008               	return
  3866     04A8                     __end_of_HCH1000_stopMeasure:
  3867                           
  3868                           	psect	text31
  3869     00AF                     __ptext31:	
  3870 ;; *************** function _HCH1000_calFreq *****************
  3871 ;; Defined at:
  3872 ;;		line 8 in file "HCH_1000.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  timer1_ticks    4   14[BANK0 ] unsigned long 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  2    0[BANK0 ] unsigned int 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 300/0
  3883 ;;		On exit  : 300/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3886 ;;      Params:         0       2       0       0       0
  3887 ;;      Locals:         0       4       0       0       0
  3888 ;;      Temps:          0      12       0       0       0
  3889 ;;      Totals:         0      18       0       0       0
  3890 ;;Total ram usage:       18 bytes
  3891 ;; Hardware stack levels used: 1
  3892 ;; Hardware stack levels required when called: 1
  3893 ;; This function calls:
  3894 ;;		___lldiv
  3895 ;; This function is called by:
  3896 ;;		_HCH1000_readFreq
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900     00AF                     _HCH1000_calFreq:	
  3901                           ;psect for function _HCH1000_calFreq
  3902                           
  3903                           
  3904                           ;HCH_1000.c: 10:     long unsigned int timer1_ticks = edgeT2 + (timer1_ovf * 65536) - ed
      +                          geT1;
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _HCH1000_calFreq: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3908     00AF  0832               	movf	_edgeT1,w
  3909     00B0  00CD               	movwf	??_HCH1000_calFreq
  3910     00B1  0833               	movf	_edgeT1+1,w
  3911     00B2  00CE               	movwf	??_HCH1000_calFreq+1
  3912     00B3  01CF               	clrf	??_HCH1000_calFreq+2
  3913     00B4  01D0               	clrf	??_HCH1000_calFreq+3
  3914     00B5  082E               	movf	_timer1_ovf,w
  3915     00B6  00D1               	movwf	??_HCH1000_calFreq+4
  3916     00B7  082F               	movf	_timer1_ovf+1,w
  3917     00B8  00D2               	movwf	??_HCH1000_calFreq+5
  3918     00B9  01D3               	clrf	??_HCH1000_calFreq+6
  3919     00BA  01D4               	clrf	??_HCH1000_calFreq+7
  3920     00BB  3010               	movlw	16
  3921     00BC                     u70_25:
  3922     00BC  1003               	clrc
  3923     00BD  0DD1               	rlf	??_HCH1000_calFreq+4,f
  3924     00BE  0DD2               	rlf	??_HCH1000_calFreq+5,f
  3925     00BF  0DD3               	rlf	??_HCH1000_calFreq+6,f
  3926     00C0  0DD4               	rlf	??_HCH1000_calFreq+7,f
  3927     00C1  3EFF               	addlw	-1
  3928     00C2  1D03               	skipz
  3929     00C3  28BC               	goto	u70_25
  3930     00C4  0830               	movf	_edgeT2,w
  3931     00C5  00D5               	movwf	??_HCH1000_calFreq+8
  3932     00C6  0831               	movf	_edgeT2+1,w
  3933     00C7  00D6               	movwf	??_HCH1000_calFreq+9
  3934     00C8  01D7               	clrf	??_HCH1000_calFreq+10
  3935     00C9  01D8               	clrf	??_HCH1000_calFreq+11
  3936     00CA  0855               	movf	??_HCH1000_calFreq+8,w
  3937     00CB  07D1               	addwf	??_HCH1000_calFreq+4,f
  3938     00CC  0856               	movf	??_HCH1000_calFreq+9,w
  3939     00CD  1803               	skipnc
  3940     00CE  0F56               	incfsz	??_HCH1000_calFreq+9,w
  3941     00CF  28D1               	goto	u71_20
  3942     00D0  28D2               	goto	u71_21
  3943     00D1                     u71_20:
  3944     00D1  07D2               	addwf	??_HCH1000_calFreq+5,f
  3945     00D2                     u71_21:
  3946     00D2  0857               	movf	??_HCH1000_calFreq+10,w
  3947     00D3  1803               	skipnc
  3948     00D4  0F57               	incfsz	??_HCH1000_calFreq+10,w
  3949     00D5  28D7               	goto	u71_22
  3950     00D6  28D8               	goto	u71_23
  3951     00D7                     u71_22:
  3952     00D7  07D3               	addwf	??_HCH1000_calFreq+6,f
  3953     00D8                     u71_23:
  3954     00D8  0858               	movf	??_HCH1000_calFreq+11,w
  3955     00D9  1803               	skipnc
  3956     00DA  0A58               	incf	??_HCH1000_calFreq+11,w
  3957     00DB  07D4               	addwf	??_HCH1000_calFreq+7,f
  3958     00DC  084D               	movf	??_HCH1000_calFreq,w
  3959     00DD  02D1               	subwf	??_HCH1000_calFreq+4,f
  3960     00DE  084E               	movf	??_HCH1000_calFreq+1,w
  3961     00DF  1C03               	skipc
  3962     00E0  0F4E               	incfsz	??_HCH1000_calFreq+1,w
  3963     00E1  28E3               	goto	u72_21
  3964     00E2  28E4               	goto	u72_22
  3965     00E3                     u72_21:
  3966     00E3  02D2               	subwf	??_HCH1000_calFreq+5,f
  3967     00E4                     u72_22:
  3968     00E4  084F               	movf	??_HCH1000_calFreq+2,w
  3969     00E5  1C03               	skipc
  3970     00E6  0F4F               	incfsz	??_HCH1000_calFreq+2,w
  3971     00E7  28E9               	goto	u72_23
  3972     00E8  28EA               	goto	u72_24
  3973     00E9                     u72_23:
  3974     00E9  02D3               	subwf	??_HCH1000_calFreq+6,f
  3975     00EA                     u72_24:
  3976     00EA  0850               	movf	??_HCH1000_calFreq+3,w
  3977     00EB  1C03               	skipc
  3978     00EC  0F50               	incfsz	??_HCH1000_calFreq+3,w
  3979     00ED  28EF               	goto	u72_25
  3980     00EE  28F0               	goto	u72_26
  3981     00EF                     u72_25:
  3982     00EF  02D4               	subwf	??_HCH1000_calFreq+7,f
  3983     00F0                     u72_26:
  3984     00F0  0854               	movf	??_HCH1000_calFreq+7,w
  3985     00F1  00DC               	movwf	HCH1000_calFreq@timer1_ticks+3
  3986     00F2  0853               	movf	??_HCH1000_calFreq+6,w
  3987     00F3  00DB               	movwf	HCH1000_calFreq@timer1_ticks+2
  3988     00F4  0852               	movf	??_HCH1000_calFreq+5,w
  3989     00F5  00DA               	movwf	HCH1000_calFreq@timer1_ticks+1
  3990     00F6  0851               	movf	??_HCH1000_calFreq+4,w
  3991     00F7  00D9               	movwf	HCH1000_calFreq@timer1_ticks
  3992                           
  3993                           ;HCH_1000.c: 11:     return (uint16_t)((16000000 / timer1_ticks) / 4);
  3994     00F8  085C               	movf	HCH1000_calFreq@timer1_ticks+3,w
  3995     00F9  00F3               	movwf	___lldiv@divisor+3
  3996     00FA  085B               	movf	HCH1000_calFreq@timer1_ticks+2,w
  3997     00FB  00F2               	movwf	___lldiv@divisor+2
  3998     00FC  085A               	movf	HCH1000_calFreq@timer1_ticks+1,w
  3999     00FD  00F1               	movwf	___lldiv@divisor+1
  4000     00FE  0859               	movf	HCH1000_calFreq@timer1_ticks,w
  4001     00FF  00F0               	movwf	___lldiv@divisor
  4002     0100  3000               	movlw	0
  4003     0101  00F7               	movwf	___lldiv@dividend+3
  4004     0102  30F4               	movlw	244
  4005     0103  00F6               	movwf	___lldiv@dividend+2
  4006     0104  3024               	movlw	36
  4007     0105  00F5               	movwf	___lldiv@dividend+1
  4008     0106  3000               	movlw	0
  4009     0107  00F4               	movwf	___lldiv@dividend
  4010     0108  120A  118A  2123  120A  118A  	fcall	___lldiv
  4011     010D  0870               	movf	?___lldiv,w
  4012     010E  00CD               	movwf	??_HCH1000_calFreq
  4013     010F  0871               	movf	?___lldiv+1,w
  4014     0110  00CE               	movwf	??_HCH1000_calFreq+1
  4015     0111  0872               	movf	?___lldiv+2,w
  4016     0112  00CF               	movwf	??_HCH1000_calFreq+2
  4017     0113  0873               	movf	?___lldiv+3,w
  4018     0114  00D0               	movwf	??_HCH1000_calFreq+3
  4019     0115  3002               	movlw	2
  4020     0116                     u73_25:
  4021     0116  1003               	clrc
  4022     0117  0CD0               	rrf	??_HCH1000_calFreq+3,f
  4023     0118  0CCF               	rrf	??_HCH1000_calFreq+2,f
  4024     0119  0CCE               	rrf	??_HCH1000_calFreq+1,f
  4025     011A  0CCD               	rrf	??_HCH1000_calFreq,f
  4026     011B  3EFF               	addlw	-1
  4027     011C  1D03               	skipz
  4028     011D  2916               	goto	u73_25
  4029     011E  084E               	movf	??_HCH1000_calFreq+1,w
  4030     011F  00CC               	movwf	?_HCH1000_calFreq+1
  4031     0120  084D               	movf	??_HCH1000_calFreq,w
  4032     0121  00CB               	movwf	?_HCH1000_calFreq
  4033     0122  0008               	return
  4034     0123                     __end_of_HCH1000_calFreq:
  4035                           
  4036                           	psect	text32
  4037     0123                     __ptext32:	
  4038 ;; *************** function ___lldiv *****************
  4039 ;; Defined at:
  4040 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  divisor         4    0[COMMON] unsigned long 
  4043 ;;  dividend        4    4[COMMON] unsigned long 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  quotient        4    9[COMMON] unsigned long 
  4046 ;;  counter         1   13[COMMON] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  4    0[COMMON] unsigned long 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, btemp+1
  4051 ;; Tracked objects:
  4052 ;;		On entry : 300/0
  4053 ;;		On exit  : 300/0
  4054 ;;		Unchanged: 300/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4056 ;;      Params:         8       0       0       0       0
  4057 ;;      Locals:         5       0       0       0       0
  4058 ;;      Temps:          1       0       0       0       0
  4059 ;;      Totals:        14       0       0       0       0
  4060 ;;Total ram usage:       14 bytes
  4061 ;; Hardware stack levels used: 1
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_HCH1000_calFreq
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069     0123                     ___lldiv:	
  4070                           ;psect for function ___lldiv
  4071                           
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  4075     0123  3000               	movlw	0
  4076     0124  00FC               	movwf	___lldiv@quotient+3
  4077     0125  3000               	movlw	0
  4078     0126  00FB               	movwf	___lldiv@quotient+2
  4079     0127  3000               	movlw	0
  4080     0128  00FA               	movwf	___lldiv@quotient+1
  4081     0129  3000               	movlw	0
  4082     012A  00F9               	movwf	___lldiv@quotient
  4083     012B  0873               	movf	___lldiv@divisor+3,w
  4084     012C  0472               	iorwf	___lldiv@divisor+2,w
  4085     012D  0471               	iorwf	___lldiv@divisor+1,w
  4086     012E  0470               	iorwf	___lldiv@divisor,w
  4087     012F  1903               	skipnz
  4088     0130  2978               	goto	i1l1823
  4089     0131  01FD               	clrf	___lldiv@counter
  4090     0132  0AFD               	incf	___lldiv@counter,f
  4091     0133                     i1l1809:
  4092     0133  1BF3               	btfsc	___lldiv@divisor+3,7
  4093     0134  2943               	goto	i1l1811
  4094     0135  3001               	movlw	1
  4095     0136  00F8               	movwf	??___lldiv
  4096     0137                     u56_25:
  4097     0137  1003               	clrc
  4098     0138  0DF0               	rlf	___lldiv@divisor,f
  4099     0139  0DF1               	rlf	___lldiv@divisor+1,f
  4100     013A  0DF2               	rlf	___lldiv@divisor+2,f
  4101     013B  0DF3               	rlf	___lldiv@divisor+3,f
  4102     013C  0BF8               	decfsz	??___lldiv,f
  4103     013D  2937               	goto	u56_25
  4104     013E  3001               	movlw	1
  4105     013F  00FF               	movwf	127
  4106     0140  087F               	movf	127,w
  4107     0141  07FD               	addwf	___lldiv@counter,f
  4108     0142  2933               	goto	i1l1809
  4109     0143                     i1l1811:
  4110     0143  3001               	movlw	1
  4111     0144  00F8               	movwf	??___lldiv
  4112     0145                     u58_25:
  4113     0145  1003               	clrc
  4114     0146  0DF9               	rlf	___lldiv@quotient,f
  4115     0147  0DFA               	rlf	___lldiv@quotient+1,f
  4116     0148  0DFB               	rlf	___lldiv@quotient+2,f
  4117     0149  0DFC               	rlf	___lldiv@quotient+3,f
  4118     014A  0BF8               	decfsz	??___lldiv,f
  4119     014B  2945               	goto	u58_25
  4120     014C  0873               	movf	___lldiv@divisor+3,w
  4121     014D  0277               	subwf	___lldiv@dividend+3,w
  4122     014E  1D03               	skipz
  4123     014F  295A               	goto	u59_25
  4124     0150  0872               	movf	___lldiv@divisor+2,w
  4125     0151  0276               	subwf	___lldiv@dividend+2,w
  4126     0152  1D03               	skipz
  4127     0153  295A               	goto	u59_25
  4128     0154  0871               	movf	___lldiv@divisor+1,w
  4129     0155  0275               	subwf	___lldiv@dividend+1,w
  4130     0156  1D03               	skipz
  4131     0157  295A               	goto	u59_25
  4132     0158  0870               	movf	___lldiv@divisor,w
  4133     0159  0274               	subwf	___lldiv@dividend,w
  4134     015A                     u59_25:
  4135     015A  1C03               	skipc
  4136     015B  296B               	goto	i1l1819
  4137     015C  0870               	movf	___lldiv@divisor,w
  4138     015D  02F4               	subwf	___lldiv@dividend,f
  4139     015E  0871               	movf	___lldiv@divisor+1,w
  4140     015F  1C03               	skipc
  4141     0160  0F71               	incfsz	___lldiv@divisor+1,w
  4142     0161  02F5               	subwf	___lldiv@dividend+1,f
  4143     0162  0872               	movf	___lldiv@divisor+2,w
  4144     0163  1C03               	skipc
  4145     0164  0F72               	incfsz	___lldiv@divisor+2,w
  4146     0165  02F6               	subwf	___lldiv@dividend+2,f
  4147     0166  0873               	movf	___lldiv@divisor+3,w
  4148     0167  1C03               	skipc
  4149     0168  0F73               	incfsz	___lldiv@divisor+3,w
  4150     0169  02F7               	subwf	___lldiv@dividend+3,f
  4151     016A  1479               	bsf	___lldiv@quotient,0
  4152     016B                     i1l1819:
  4153     016B  3001               	movlw	1
  4154     016C                     u60_25:
  4155     016C  1003               	clrc
  4156     016D  0CF3               	rrf	___lldiv@divisor+3,f
  4157     016E  0CF2               	rrf	___lldiv@divisor+2,f
  4158     016F  0CF1               	rrf	___lldiv@divisor+1,f
  4159     0170  0CF0               	rrf	___lldiv@divisor,f
  4160     0171  3EFF               	addlw	-1
  4161     0172  1D03               	skipz
  4162     0173  296C               	goto	u60_25
  4163     0174  3001               	movlw	1
  4164     0175  02FD               	subwf	___lldiv@counter,f
  4165     0176  1D03               	btfss	3,2
  4166     0177  2943               	goto	i1l1811
  4167     0178                     i1l1823:
  4168     0178  087C               	movf	___lldiv@quotient+3,w
  4169     0179  00F3               	movwf	?___lldiv+3
  4170     017A  087B               	movf	___lldiv@quotient+2,w
  4171     017B  00F2               	movwf	?___lldiv+2
  4172     017C  087A               	movf	___lldiv@quotient+1,w
  4173     017D  00F1               	movwf	?___lldiv+1
  4174     017E  0879               	movf	___lldiv@quotient,w
  4175     017F  00F0               	movwf	?___lldiv
  4176     0180  0008               	return
  4177     0181                     __end_of___lldiv:
  4178                           
  4179                           	psect	text33
  4180     04A8                     __ptext33:	
  4181 ;; *************** function _HCH1000_getFreq *****************
  4182 ;; Defined at:
  4183 ;;		line 32 in file "HCH_1000.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  2    0[COMMON] unsigned int 
  4190 ;; Registers used:
  4191 ;;		wreg
  4192 ;; Tracked objects:
  4193 ;;		On entry : 300/0
  4194 ;;		On exit  : 300/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4197 ;;      Params:         2       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0
  4200 ;;      Totals:         2       0       0       0       0
  4201 ;;Total ram usage:        2 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_ISR
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210     04A8                     _HCH1000_getFreq:	
  4211                           ;psect for function _HCH1000_getFreq
  4212                           
  4213                           
  4214                           ;HCH_1000.c: 34:     return hch1000_freq;
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _HCH1000_getFreq: [wreg]
  4218     04A8  0835               	movf	_hch1000_freq+1,w
  4219     04A9  00F1               	movwf	?_HCH1000_getFreq+1
  4220     04AA  0834               	movf	_hch1000_freq,w
  4221     04AB  00F0               	movwf	?_HCH1000_getFreq
  4222     04AC  0008               	return
  4223     04AD                     __end_of_HCH1000_getFreq:
  4224     007E                     btemp	set	126	;btemp
  4225     007E                     wtemp0	set	126
  4226                           
  4227                           	psect	idloc
  4228                           
  4229                           ;Config register IDLOC0 @ 0x2000
  4230                           ;	unspecified, using default values
  4231     2000                     	org	8192
  4232     2000  3FFF               	dw	16383
  4233                           
  4234                           ;Config register IDLOC1 @ 0x2001
  4235                           ;	unspecified, using default values
  4236     2001                     	org	8193
  4237     2001  3FFF               	dw	16383
  4238                           
  4239                           ;Config register IDLOC2 @ 0x2002
  4240                           ;	unspecified, using default values
  4241     2002                     	org	8194
  4242     2002  3FFF               	dw	16383
  4243                           
  4244                           ;Config register IDLOC3 @ 0x2003
  4245                           ;	unspecified, using default values
  4246     2003                     	org	8195
  4247     2003  3FFF               	dw	16383
  4248                           
  4249                           	psect	config
  4250                           
  4251                           ;Config register CONFIG @ 0x2007
  4252                           ;	Oscillator Selection bits
  4253                           ;	FOSC = HS, HS oscillator
  4254                           ;	Watchdog Timer Enable bit
  4255                           ;	WDTE = OFF, WDT disabled
  4256                           ;	Power-up Timer Enable bit
  4257                           ;	PWRTE = OFF, PWRT disabled
  4258                           ;	Brown-out Reset Enable bit
  4259                           ;	BOREN = ON, BOR enabled
  4260                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4261                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4262                           ;	Data EEPROM Memory Code Protection bit
  4263                           ;	CPD = OFF, Data EEPROM code protection off
  4264                           ;	Flash Program Memory Write Enable bits
  4265                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4266                           ;	In-Circuit Debugger Mode bit
  4267                           ;	DEBUG = 0x1, unprogrammed default
  4268                           ;	Flash Program Memory Code Protection bit
  4269                           ;	CP = OFF, Code protection off
  4270     2007                     	org	8199
  4271     2007  3FFA               	dw	16378

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      66
    BANK1            80      9      17
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UARTrcvString@rcv_buffer	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK0[9]), 

    UARTsendString@str	PTR unsigned char  size(1) Largest target is 9
		 -> ModbusFrame(BANK0[9]), 

    Slave_DataHandling@buf	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK0[9]), 

    ReceiveData_Check@str	PTR unsigned char  size(1) Largest target is 9
		 -> rcv_buffer(BANK0[9]), 

    CRCcheck@buf	PTR unsigned char  size(1) Largest target is 9
		 -> ModbusFrame(BANK0[9]), rcv_buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _UARTrcvString->_UARTrcvChar
    _TC72_Read->i1_TC72_Write
    i1_TC72_Write->i1_SPI_Tx_Byte
    _Slave_SendData->_CRCcheck
    _Slave_DataHandling->_ReceiveData_Check
    _Slave_DataHandling->_SendErrorFrame
    _SendErrorFrame->_CRCcheck
    _UARTsendString->_UARTsendChar
    _ReceiveData_Check->_CRCcheck
    _HCH1000_calFreq->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _Slave_DataHandling->_ReceiveData_Check
    _HCH1000_readFreq->_HCH1000_calFreq

Critical Paths under _main in BANK1

    _main->_TC72_Init
    _timer0TimerInit->_timer0SetPrescaler
    _TC72_Init->_TC72_Write
    _TC72_Write->_SPI_Tx_Byte

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     550
                                              6 BANK1      3     3      0
                       _HCH1000_Init
                 _ModbusRTUslaveInit
                          _TC72_Init
                    _timer0TimerInit
 ---------------------------------------------------------------------------------
 (1) _timer0TimerInit                                      2     0      2     312
                                              2 BANK1      2     0      2
                 _timer0SetPrescaler
 ---------------------------------------------------------------------------------
 (2) _timer0SetPrescaler                                   2     0      2     191
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TC72_Init                                            3     3      0     238
                                              3 BANK1      3     3      0
                    _SPI_Master_Init
                         _TC72_Write
 ---------------------------------------------------------------------------------
 (2) _TC72_Write                                           2     1      1     238
                                              1 BANK1      2     1      1
                        _SPI_Tx_Byte
 ---------------------------------------------------------------------------------
 (3) _SPI_Tx_Byte                                          1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusRTUslaveInit                                   0     0      0       0
                   _UARTTransRcvInit
 ---------------------------------------------------------------------------------
 (2) _UARTTransRcvInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HCH1000_Init                                         0     0      0       0
                  _captureRisingInit
 ---------------------------------------------------------------------------------
 (2) _captureRisingInit                                    0     0      0       0
                  _ccp1InterruptInit
                         _timer1Init
 ---------------------------------------------------------------------------------
 (3) _timer1Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ccp1InterruptInit                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0    3847
                                             18 BANK0      4     4      0
                    _HCH1000_getFreq
                   _HCH1000_readFreq
               _HCH1000_startMeasure
                  _HCH1000_timer1Ovf
                 _Slave_DataHandling
                     _Slave_SendData
                          _TC72_Read
                      _UARTrcvString
 ---------------------------------------------------------------------------------
 (5) _UARTrcvString                                        5     3      2     220
                                              1 COMMON     5     3      2
                        _UARTrcvChar
 ---------------------------------------------------------------------------------
 (6) _UARTrcvChar                                          1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TC72_Read                                            6     4      2     160
                                              3 COMMON     6     4      2
                        _SPI_Rx_byte
                      i1_SPI_Tx_Byte
                       i1_TC72_Write
 ---------------------------------------------------------------------------------
 (6) i1_TC72_Write                                         2     1      1      92
                                              1 COMMON     2     1      1
                      i1_SPI_Tx_Byte
 ---------------------------------------------------------------------------------
 (7) i1_SPI_Tx_Byte                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SPI_Rx_byte                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Slave_SendData                                      11     6      5    1189
                                              0 BANK0     11     6      5
                           _CRCcheck
                     _UARTsendString
 ---------------------------------------------------------------------------------
 (5) _Slave_DataHandling                                   3     3      0    1941
                                              7 BANK0      3     3      0
                  _ReceiveData_Check
                     _SendErrorFrame
 ---------------------------------------------------------------------------------
 (6) _SendErrorFrame                                       5     2      3     955
                                             12 COMMON     2     2      0
                                              0 BANK0      3     0      3
                           _CRCcheck
                     _UARTsendString
 ---------------------------------------------------------------------------------
 (6) _UARTsendString                                       4     4      0     178
                                              1 COMMON     4     4      0
                       _UARTsendChar
 ---------------------------------------------------------------------------------
 (7) _UARTsendChar                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ReceiveData_Check                                    9     7      2     797
                                             12 COMMON     2     0      2
                                              0 BANK0      7     7      0
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (6) _CRCcheck                                            12    10      2     512
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (5) _HCH1000_timer1Ovf                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _HCH1000_startMeasure                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _HCH1000_readFreq                                     0     0      0     337
                    _HCH1000_calFreq
                _HCH1000_stopMeasure
 ---------------------------------------------------------------------------------
 (6) _HCH1000_stopMeasure                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HCH1000_calFreq                                     18    16      2     337
                                              0 BANK0     18    16      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (5) _HCH1000_getFreq                                      2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _HCH1000_Init
     _captureRisingInit
       _ccp1InterruptInit
       _timer1Init
   _ModbusRTUslaveInit
     _UARTTransRcvInit
   _TC72_Init
     _SPI_Master_Init
     _TC72_Write
       _SPI_Tx_Byte
   _timer0TimerInit
     _timer0SetPrescaler

 _ISR (ROOT)
   _HCH1000_getFreq
   _HCH1000_readFreq
     _HCH1000_calFreq
       ___lldiv
     _HCH1000_stopMeasure
   _HCH1000_startMeasure
   _HCH1000_timer1Ovf
   _Slave_DataHandling
     _ReceiveData_Check
       _CRCcheck
     _SendErrorFrame
       _CRCcheck
       _UARTsendString
         _UARTsendChar
   _Slave_SendData
     _CRCcheck
     _UARTsendString
   _TC72_Read
     _SPI_Rx_byte
     i1_SPI_Tx_Byte
     i1_TC72_Write
       i1_SPI_Tx_Byte
   _UARTrcvString
     _UARTrcvChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      9      11       7       21.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      42       5       82.5%
BITBANK0            50      0       1       4        1.2%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      61      12        0.0%
ABS                  0      0      61       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Aug 20 10:32:04 2023

                  _SPI_Master_Init 041E                                  pc 0002  
                      ?_TC72_Write 00A1               ??_ModbusRTUslaveInit 00A0  
                      _SPI_Tx_Byte 043B                        _SSPSTATbits 0094  
                               l85 031B                        _SPI_Rx_byte 048A  
                               fsr 0004                                l241 043F  
                              l360 0187                                l361 018B  
                              l362 018F                                l363 0193  
                              l364 0197                                l365 019B  
                              l366 019F                                l358 0182  
                              l367 01A3                                l368 01CE  
                              _CKE 04A6                                _CKP 00A4  
                              _GIE 005F                                _RB1 0031  
                              _RD0 0040                                _PS0 0408  
                              _PS1 0409                                _PS2 040A  
                              _ISR 002E                                _PSA 040B  
                              u937 0314                                _RX9 00C6  
                              u947 0382                                _SMP 04A7  
                              _TX9 04C6                    TC72_Write@value 00A1  
                              fsr0 0004                                indf 0000  
                  ??_UARTrcvString 0073            UARTrcvString@rcv_buffer 0075  
                  _timer0TimerInit 03FE                               ?_ISR 0070  
                             l2283 01A7                               l2391 01C9  
                             l2389 01AF                               _BRGH 04C2  
                             _CREN 00C4                               _T0CS 040D  
                             _PEIE 005E                               _RCIE 0465  
                             _RCIF 0065                               i1l80 00A4  
                             _OERR 00C1                               _TMR0 0001  
                             _TMR1 000E                               _WCOL 00A7  
                             _SPEN 00C7                               _TRMT 04C1  
                             _TXEN 04C5                               _SYNC 04C4  
                     _HCH1000_Init 046A                               _main 02F0  
                             _send 0308                               _temp 0028  
                             btemp 007E                               start 0012  
                 ??_UARTsendString 0071           __end_of_HCH1000_readFreq 03A9  
                      CRCcheck@crc 007A                        CRCcheck@buf 0075  
                      CRCcheck@len 0070                        CRCcheck@pos 0076  
                            ??_ISR 005D                  TC72_Write@address 00A2  
            __end_ofi1_SPI_Tx_Byte 0452                   __end_of_CRCcheck 021C  
                            ?_main 0070                              _CCPR1 0015  
                  __end_of___lldiv 0181                              i1l144 01D6  
                            i1l313 0483                              i1l241 044A  
                            i1l146 01F1                              i1l158 028A  
                            i1l262 048B                              _RCREG 001A  
         __end_of_UARTTransRcvInit 03DC                              _SPBRG 0099  
                            u50_25 01F4                              u51_25 0200  
                            u60_25 016C                       TC72_Read@lsb 0078  
                     TC72_Read@msb 0077                              u53_25 01DF  
                            u70_25 00BC                              u71_20 00D1  
                            u71_21 00D2                              u71_22 00D7  
                            u71_23 00D8                              u72_21 00E3  
                            u72_22 00E4                              _SSPM0 00A0  
                            u72_23 00E9                              _SSPM1 00A1  
                            u72_24 00EA                              _SSPM2 00A2  
                            u56_25 0137                              u72_25 00EF  
                            _SSPM3 00A3                              u72_26 00F0  
                            u73_25 0116                              _TRISD 0088  
                            _SSPEN 00A5                              u58_25 0145  
                            u59_25 015A                              u76_25 022F  
                            _TXREG 0019                              pclath 000A  
           SendErrorFrame@function 004D                  _ReceiveData_Check 0261  
                            status 0003                              wtemp0 007E  
          __end_of_SPI_Master_Init 042D                 ?_ReceiveData_Check 007C  
                  __initialization 0015                  _ccp1InterruptInit 0498  
                 ??_SendErrorFrame 007C                       __end_of_main 031C  
              ??_ReceiveData_Check 007E                 ?_ccp1InterruptInit 0070  
          __end_of_timer0TimerInit 040E                             ??_main 00A6  
                ??_HCH1000_calFreq 004D                  __end_of_TC72_Init 0389  
                __end_of_TC72_Read 0345                ??_ccp1InterruptInit 00A0  
               _timer0SetPrescaler 0181                  ??_HCH1000_getFreq 0072  
                           _CCP1M0 00B8                             _CCP1M1 00B9  
                           _CCP1M2 00BA                             _CCP1M3 00BB  
                           _CCP1IE 0462                             _CCP1IF 0062  
                    ?i1_TC72_Write 0071                ?_timer0SetPrescaler 00A0  
        __end_of_ReceiveData_Check 0293                             i1l2051 02CA  
                           i1l2035 024E                             i1l2019 0221  
                           i1l2045 02CB                             i1l2049 02CD  
                           i1l2161 007C                             i1l2145 005E  
                           i1l2163 007D                             i1l2155 0069  
                           i1l2139 004A                             i1l2147 005F  
                           i1l2069 02EE                             i1l1811 0143  
                           i1l1823 0178                             i1l1809 0133  
                           i1l1819 016B                             i1l1771 0206  
                           i1l1923 047E                             i1l1777 0217  
                           i1l1769 01FF                             i1l1881 026B  
                           i1l1883 026C                             i1l1787 03AC  
                           i1l1893 028D                             i1l1895 028E  
                           i1l1999 0396                             _TMR0IE 005D  
                           _TMR0IF 005A                             _TMR1IE 0460  
                           _TMR1IF 0060                             _TMR1CS 0081  
                           _TMR1ON 0080                             _TRISB1 0431  
                           _TRISD0 0440                             _TRISC2 043A  
                           _TRISC3 043B                             _TRISC4 043C  
                           _TRISC5 043D                             _TRISC6 043E  
                           _TRISC7 043F                             _SSPBUF 0013  
                           _SS_pin 00A9          __end_of_ccp1InterruptInit 049E  
                           _edgeT1 0032                             _edgeT2 0030  
                        ??___lldiv 0078               ??_timer0SetPrescaler 00A2  
                   _Slave_SendData 0293                       ?_UARTrcvChar 0070  
                           saved_w 007E                     ??i1_TC72_Write 0072  
                UARTsendString@str 0074            __end_of__initialization 002A  
                        ?_CRCcheck 0070                   ?_SPI_Master_Init 0070  
                   __pcstackCOMMON 0070             __end_of_Slave_SendData 02C2  
                     __pidataBANK1 0452        timer0SetPrescaler@prescaler 00A0  
                     ??_TC72_Write 00A2                       ?_SPI_Tx_Byte 0070  
                     ?_SPI_Rx_byte 0070           Slave_DataHandling@eframe 0052  
                 ?_timer0TimerInit 00A2        __end_of_HCH1000_stopMeasure 04A8  
                    CRCcheck@index 0078                         __pbssBANK0 0020  
               __end_of_TC72_Write 03FE                         ??_CRCcheck 0072  
                      _ModbusFrame 0042                         __pmaintext 02F0  
                ?_HCH1000_readFreq 0070                    ?_Slave_SendData 004B  
                       __pintentry 0004                 ??_HCH1000_readFreq 007E  
                          _CCP1CON 0017                            _T1CKPS0 0084  
                          _T1CKPS1 0085                  ?_UARTTransRcvInit 0070  
               ??_UARTTransRcvInit 00A0              __end_of_UARTrcvString 0261  
               Slave_SendData@temp 004B                    SPI_Tx_Byte@data 00A0  
                       _count_temp 002C                    _HCH1000_calFreq 00AF  
                  _HCH1000_getFreq 04A8               __end_ofi1_TC72_Write 043B  
                          ___lldiv 0123                            __ptext1 03FE  
                          __ptext2 0181                            __ptext3 0369  
                          __ptext4 03ED                            __ptext5 043B  
                          __ptext6 041E                            __ptext7 0462  
                          __ptext8 03C6                            __ptext9 046A  
                       _humid_freq 0026                          _TC72_Init 0369  
                        _TC72_Read 031C                  SendErrorFrame@CRC 007C  
              i1TC72_Write@address 0072                            clrloop0 045B  
             end_of_initialization 002A                      ?_UARTsendChar 0070  
                       _rcv_buffer 0039                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                         _timer1Init 0472  
             ReceiveData_Check@CRC 004D                         _timer1_ovf 002E  
             Slave_SendData@humidH 0053               Slave_SendData@humidL 0052  
             ReceiveData_Check@str 0051                         ?_TC72_Init 0070  
                       ?_TC72_Read 0073               SendErrorFrame@Eframe 004B  
                   ??_UARTsendChar 0070            __end_of_HCH1000_calFreq 0123  
     __end_of_HCH1000_startMeasure 04A3            __end_of_HCH1000_getFreq 04AD  
            Slave_DataHandling@buf 0054         __end_of_Slave_DataHandling 02F0  
                    i1_SPI_Tx_Byte 0447                      __pbitbssBANK0 0308  
_uart_str_idx@PIC16F877A_UART$F179 0024  _uart_str_idx@PIC16F877A_UART$F375 0020  
              start_initialization 0015                        __end_of_ISR 00AF  
                    ?_HCH1000_Init 0070                   ??_Slave_SendData 007C  
                      ?_timer1Init 0070                         init_fetch0 03DC  
                   ?i1_SPI_Tx_Byte 0070                        __pdataBANK1 00A9  
         timer0TimerInit@prescaler 00A2                  i1TC72_Write@value 0071  
                        ___latbits 0002                      __pcstackBANK0 004B  
                    __pcstackBANK1 00A0                        ??_TC72_Init 00A3  
                      ??_TC72_Read 0075                     ??_HCH1000_Init 00A0  
                     i1_TC72_Write 042D                   ?_HCH1000_calFreq 004B  
                 ?_HCH1000_getFreq 0070         __end_of_ModbusRTUslaveInit 046A  
                         ?___lldiv 0070                  Slave_SendData@CRC 0054  
             __end_of_UARTsendChar 048A                     _UARTsendString 03A9  
                _HCH1000_timer1Ovf 0491               _HCH1000_startMeasure 049E  
               ?_HCH1000_timer1Ovf 0070                ??_HCH1000_timer1Ovf 0070  
                interrupt_function 0004                           _CRCcheck 01CF  
                        clear_ram0 045A                    ??i1_SPI_Tx_Byte 0070  
              Slave_SendData@tempH 0051                Slave_SendData@tempL 0050  
           __end_of_UARTsendString 03C6          __end_of_HCH1000_timer1Ovf 0498  
                    ??_UARTrcvChar 0070                     _SendErrorFrame 0345  
            ?_HCH1000_startMeasure 0070                  ??_SPI_Master_Init 00A0  
                _captureRisingInit 040E                 ?_captureRisingInit 0070  
                ??_timer0TimerInit 00A4                        _count_humid 002A  
              ??_captureRisingInit 00A0                      ??_SPI_Tx_Byte 00A0  
          ReceiveData_Check@eframe 004F                    ?_UARTsendString 0070  
                    ??_SPI_Rx_byte 0070                    UARTsendString@i 0072  
          Slave_SendData@humid_frq 004D                UARTrcvString@length 0071  
             __end_of_HCH1000_Init 0472             __end_of_SendErrorFrame 0369  
                 _HCH1000_readFreq 0389          __end_of_captureRisingInit 041E  
                         __ptext10 040E                           __ptext11 0472  
                         __ptext20 0293                           __ptext12 0498  
                         __ptext21 02C2                           __ptext13 002E  
                         __ptext30 04A3                           __ptext22 0345  
                         __ptext14 021C                           __ptext31 00AF  
                         __ptext23 03A9                           __ptext15 047A  
                         __ptext32 0123                           __ptext24 0482  
                         __ptext16 031C                           __ptext33 04A8  
                         __ptext25 0261                           __ptext17 042D  
                         __ptext26 01CF                           __ptext18 0447  
                         __ptext27 0491                           __ptext19 048A  
                         __ptext28 049E                           __ptext29 0389  
               _Slave_DataHandling 02C2                __end_of_UARTrcvChar 0482  
                    _UARTrcvString 021C                ?_Slave_DataHandling 0070  
                 _UARTTransRcvInit 03C6                       ??_timer1Init 00A0  
       __end_of_timer0SetPrescaler 01CF                         _TC72_Write 03ED  
              _HCH1000_stopMeasure 04A3                    ?_SendErrorFrame 004B  
             ??_Slave_DataHandling 007E             ??_HCH1000_startMeasure 0070  
              __end_of_SPI_Tx_Byte 0447                __end_of_SPI_Rx_byte 0491  
                    _hch1000_state 0038                           init_ram0 03E0  
           Slave_SendData@function 004F                     ?_UARTrcvString 0071  
      HCH1000_calFreq@timer1_ticks 0059               ?_HCH1000_stopMeasure 0070  
               __end_of_timer1Init 047A                           intlevel1 0000  
                     _UARTsendChar 0482                   ___lldiv@dividend 0074  
                     _uart_str_idx 0036                      UARTsendChar@c 0070  
            ReceiveData_Check@CRCH 004C              ReceiveData_Check@CRCL 004B  
                     _hch1000_freq 0034                        _UARTrcvChar 047A  
                 ___lldiv@quotient 0079                 _ModbusRTUslaveInit 0462  
                     UARTrcvChar@c 0070              ??_HCH1000_stopMeasure 0070  
                i1SPI_Tx_Byte@data 0070                ?_ModbusRTUslaveInit 0070  
                      _spi_str_idx 0022  
